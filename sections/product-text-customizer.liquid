{% comment %}
  最终版本：使用 Tailwind CSS 工具类进行样式设置。
  这可以确保我们的样式与您主题的样式系统协同工作，而不是相互冲突。
  我们已经删除了整个 <style> 块。
{% endcomment %}

<div class="page-width py-10 border-t border-gray-200">
  <div class="customizer-container flex flex-wrap gap-8">
    
    {% comment %} 控制面板，使用 Tailwind 样式 {% endcomment %}
    <div class="customizer-controls w-full md:w-1/3">
      <h3 class="text-xl font-bold mb-6">设计你的标签</h3>
      
      <div class="control-group mb-5">
        <label for="text-input" class="block text-sm font-medium text-gray-700 mb-1">输入文字:</label>
        <input type="text" id="text-input" placeholder="你的文字" class="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
      </div>

      <div class="control-group mb-5">
        <label for="font-size-input" class="block text-sm font-medium text-gray-700 mb-1">字体大小:</label>
        <input type="number" id="font-size-input" value="20" min="8" max="72" class="w-full p-2 border border-gray-300 rounded-md shadow-sm">
      </div>

      <div class="control-group mb-5">
        <label for="color-input" class="block text-sm font-medium text-gray-700 mb-1">字体颜色:</label>
        {% comment %} 颜色选择器可能需要特定样式来保证高度一致 {% endcomment %}
        <input type="color" id="color-input" value="#000000" class="w-full h-10 p-1 border border-gray-300 rounded-md cursor-pointer">
      </div>

      <button id="add-to-cart-btn" class="w-full bg-indigo-600 text-white font-bold py-3 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
        添加到购物车
      </button>
    </div>

    {% comment %} 画布区域，使用 Tailwind 样式 - 这是最关键的修复！ {% endcomment %}
    <div class="canvas-wrapper w-full md:w-2/3 bg-gray-50 border border-gray-200 rounded-md min-h-[250px] md:min-h-0">
      <div id="konva-container" class="w-full h-full"></div>
    </div>

  </div>
</div>

{% comment %} JavaScript 部分保持不变，它已经是最终形态 {% endcomment %}
<script>
  const initializeKonvaApp = (sectionElement) => {
    const konvaContainer = sectionElement.querySelector('#konva-container');
    if (!konvaContainer || konvaContainer.dataset.initialized === 'true') return;
    konvaContainer.dataset.initialized = 'true';

    console.log("Konva: 初始化开始...");
    
    setTimeout(() => {
        const stageWidth = konvaContainer.clientWidth;
        const stageHeight = konvaContainer.clientHeight;
        
        if (stageWidth === 0 || stageHeight === 0) {
            console.error("Konva 致命错误: 容器尺寸仍为0。请确认 .canvas-wrapper 上有 Tailwind 的 min-height 类，如 min-h-[250px]");
            return;
        }

        console.log(`Konva: 容器尺寸最终确定为: ${stageWidth}x${stageHeight}`);
        
        const stage = new Konva.Stage({ container: konvaContainer, width: stageWidth, height: stageHeight });
        const layer = new Konva.Layer();
        stage.add(layer);

        const backgroundRect = new Konva.Rect({ x: 0, y: 0, width: stageWidth, height: stageHeight, fill: '#FFFFFF', stroke: '#dddddd', strokeWidth: 1 });
        layer.add(backgroundRect);

        const konvaText = new Konva.Text({ x: stageWidth / 2, y: stageHeight / 2, text: '你的文字', fontSize: 30, fontFamily: 'Arial', fill: '#000000', draggable: true });
        layer.add(konvaText);
        konvaText.offsetX(konvaText.width() / 2);
        konvaText.offsetY(konvaText.height() / 2);
        
        layer.draw();
        console.log("Konva: 画布已绘制！");

        const textInput = sectionElement.querySelector('#text-input');
        const fontSizeInput = sectionElement.querySelector('#font-size-input');
        const colorInput = sectionElement.querySelector('#color-input');
        const addToCartBtn = sectionElement.querySelector('#add-to-cart-btn');

        textInput.addEventListener('input', (e) => { konvaText.text(e.target.value || ' '); konvaText.offsetX(konvaText.width() / 2); layer.draw(); });
        fontSizeInput.addEventListener('input', (e) => { konvaText.fontSize(parseInt(e.target.value, 10)); konvaText.offsetX(konvaText.width() / 2); konvaText.offsetY(konvaText.height() / 2); layer.draw(); });
        colorInput.addEventListener('input', (e) => { konvaText.fill(e.target.value); layer.draw(); });
        addToCartBtn.addEventListener('click', (e) => {
            e.preventDefault();
            const productForm = document.querySelector('form[action*="/cart/add"]');
            const variantIdInput = productForm ? productForm.querySelector('[name="id"]') : null;
            if (!variantIdInput || !variantIdInput.value) { alert('错误：找不到产品变体ID。'); return; }
            const variantId = variantIdInput.value;
            backgroundRect.hide();
            layer.draw();
            const previewImage = stage.toDataURL({ pixelRatio: 2 });
            backgroundRect.show();
            layer.draw();
            const formData = { items: [{ id: variantId, quantity: 1, properties: { '_CustomTextPreview': previewImage, '定制文字': textInput.value, '字体大小': fontSizeInput.value, '字体颜色': colorInput.value }}] };
            fetch('/cart/add.js', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(formData) })
              .then(res => res.json()).then(data => { if (!data.status) { window.location.href = '/cart'; } else { alert('添加失败: ' + data.description); }})
              .catch(console.error);
        });
    }, 0);
  };

  const bootstrapper = () => {
    const konvaCheckInterval = setInterval(() => {
      if (typeof window.Konva !== 'undefined') {
        clearInterval(konvaCheckInterval);
        const sectionId = 'shopify-section-{{ section.id }}';
        const sectionElement = document.getElementById(sectionId);
        if (!sectionElement) return;
        const elementCheckInterval = setInterval(() => {
          const konvaContainer = sectionElement.querySelector('#konva-container');
          if (konvaContainer) {
            clearInterval(elementCheckInterval);
            initializeKonvaApp(sectionElement);
          }
        }, 100);
        setTimeout(() => { clearInterval(elementCheckInterval); }, 5000);
      }
    }, 100);
    setTimeout(() => { clearInterval(konvaCheckInterval); }, 5000);
  };
  document.addEventListener('turbo:load', bootstrapper);
  document.addEventListener('shopify:section:load', bootstrapper);
  if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', bootstrapper); } else { bootstrapper(); }
</script>

{% schema %}
{
  "name": "Product Text Customizer",
  "settings": [],
  "presets": [
    {
      "name": "Product Text Customizer"
    }
  ]
}
{% endschema %}