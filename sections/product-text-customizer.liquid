{% comment %}
  这是一个完整的 Section 文件，包含了所有必需的部分：
  1. HTML 结构 (定制器的界面)
  2. CSS 样式 (让界面看起来更美观)
  3. JavaScript 脚本 (驱动功能的逻辑，使用最稳健的轮询方法)
  4. Liquid Schema (让 Shopify 识别这是一个 Section)
{% endcomment %}

<div class="page-width">
  <div class="customizer-container">
    
    <div class="customizer-controls">
      <h3>设计你的标签</h3>
      
      <div class="control-group">
        <label for="text-input">输入文字:</label>
        <input type="text" id="text-input" placeholder="你的文字">
      </div>

      <div class="control-group">
        <label for="font-size-input">字体大小:</label>
        <input type="number" id="font-size-input" value="20" min="8" max="72">
      </div>

      <div class="control-group">
        <label for="color-input">字体颜色:</label>
        <input type="color" id="color-input" value="#000000">
      </div>

      <button id="add-to-cart-btn" class="button button--primary">添加到购物车</button>
    </div>

    <div class="canvas-wrapper">
      {% comment %} 这是我们一直在寻找的目标元素！ {% endcomment %}
      <div id="konva-container"></div>
    </div>

  </div>
</div>

<style>
  .customizer-container {
    display: flex;
    flex-wrap: wrap;
    gap: 30px;
    margin: 40px 0;
    padding-top: 40px;
    border-top: 1px solid #e5e5e5;
  }
  .customizer-controls {
    flex: 1;
    min-width: 250px;
  }
  .canvas-wrapper {
    flex: 2;
    min-width: 400px;
    background-color: #f7f7f7;
    border: 1px solid #ccc;
    height: 200px;
  }
  #konva-container {
    width: 100%;
    height: 100%;
  }
  .control-group {
    margin-bottom: 20px;
  }
  .control-group label {
    display: block;
    margin-bottom: 5px;
  }
  .control-group input {
    width: 100%;
    padding: 8px;
  }
</style>

{% comment %} <script>
  const initializeKonvaApp = (sectionElement) => {
    const konvaContainer = sectionElement.querySelector('#konva-container');
    if (!konvaContainer || konvaContainer.dataset.initialized === 'true') return;
    konvaContainer.dataset.initialized = 'true';

    console.log("Konva Log: 目标元素已找到，开始初始化...");

    const stageWidth = konvaContainer.clientWidth;
    const stageHeight = konvaContainer.clientHeight;
    const stage = new Konva.Stage({ container: konvaContainer, width: stageWidth, height: stageHeight });
    const layer = new Konva.Layer();
    stage.add(layer);
    const backgroundRect = new Konva.Rect({ x: 0, y: 0, width: stageWidth, height: stageHeight, fill: '#FFFFFF', stroke: '#dddddd', strokeWidth: 1 });
    layer.add(backgroundRect);
    const konvaText = new Konva.Text({ x: stageWidth / 2, y: stageHeight / 2, text: '你的文字', fontSize: 20, fontFamily: 'Arial', fill: '#000000', draggable: true });
    layer.add(konvaText);
    konvaText.offsetX(konvaText.width() / 2);
    konvaText.offsetY(konvaText.height() / 2);
    layer.draw();

    const textInput = sectionElement.querySelector('#text-input');
    const fontSizeInput = sectionElement.querySelector('#font-size-input');
    const colorInput = sectionElement.querySelector('#color-input');
    const addToCartBtn = sectionElement.querySelector('#add-to-cart-btn');

    textInput.addEventListener('input', (e) => { konvaText.text(e.target.value || ' '); konvaText.offsetX(konvaText.width() / 2); layer.draw(); });
    fontSizeInput.addEventListener('input', (e) => { konvaText.fontSize(parseInt(e.target.value, 10)); konvaText.offsetX(konvaText.width() / 2); konvaText.offsetY(konvaText.height() / 2); layer.draw(); });
    colorInput.addEventListener('input', (e) => { konvaText.fill(e.target.value); layer.draw(); });
    addToCartBtn.addEventListener('click', (e) => {
      e.preventDefault();
      const productForm = document.querySelector('form[action*="/cart/add"]');
      const variantIdInput = productForm ? productForm.querySelector('[name="id"]') : null;
      if (!variantIdInput || !variantIdInput.value) { alert('错误：找不到产品变体ID。'); return; }
      const variantId = variantIdInput.value;
      backgroundRect.hide();
      layer.draw();
      const previewImage = stage.toDataURL({ pixelRatio: 2 });
      backgroundRect.show();
      layer.draw();
      const formData = { items: [{ id: variantId, quantity: 1, properties: { '_CustomTextPreview': previewImage, '定制文字': textInput.value, '字体大小': fontSizeInput.value, '字体颜色': colorInput.value }}] };
      fetch('/cart/add.js', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(formData) })
        .then(res => res.json()).then(data => { if (!data.status) { window.location.href = '/cart'; } else { alert('添加失败: ' + data.description); }})
        .catch(console.error);
    });

    console.log("Konva Log: 定制器已成功初始化并准备就绪！");
  };

  const bootstrapper = () => {
    const sectionId = 'shopify-section-{{ section.id }}';
    const sectionElement = document.getElementById(sectionId);
    if (!sectionElement) return;

    const intervalId = setInterval(() => {
      const konvaContainer = sectionElement.querySelector('#konva-container');
      if (konvaContainer) {
        clearInterval(intervalId);
        initializeKonvaApp(sectionElement);
      }
    }, 100);
    setTimeout(() => { clearInterval(intervalId); }, 5000);
  };

  document.addEventListener('turbo:load', bootstrapper);
  document.addEventListener('shopify:section:load', bootstrapper);
  bootstrapper();
</script> {% endcomment %}

<script>
  // 核心初始化逻辑 (保持不变)
  const initializeKonvaApp = (sectionElement) => {
    const konvaContainer = sectionElement.querySelector('#konva-container');
    if (!konvaContainer || konvaContainer.dataset.initialized === 'true') return;
    konvaContainer.dataset.initialized = 'true';

    console.log("Konva Log: 依赖项全部就绪，开始初始化应用...");

    const stageWidth = konvaContainer.clientWidth;
    const stageHeight = konvaContainer.clientHeight;
    const stage = new Konva.Stage({ container: konvaContainer, width: stageWidth, height: stageHeight });
    const layer = new Konva.Layer();
    stage.add(layer);

    const backgroundRect = new Konva.Rect({ x: 0, y: 0, width: stageWidth, height: stageHeight, fill: '#FFFFFF', stroke: '#dddddd', strokeWidth: 1 });
    layer.add(backgroundRect);
    
    const konvaText = new Konva.Text({ x: stageWidth / 2, y: stageHeight / 2, text: '你的文字', fontSize: 30, fontFamily: 'Arial', fill: '#000000', draggable: true });
    layer.add(konvaText);
    konvaText.offsetX(konvaText.width() / 2);
    konvaText.offsetY(konvaText.height() / 2);

    setTimeout(() => {
      layer.draw();
      console.log("Konva Log: 画布已绘制！");
    }, 100);

    const textInput = sectionElement.querySelector('#text-input');
    const fontSizeInput = sectionElement.querySelector('#font-size-input');
    const colorInput = sectionElement.querySelector('#color-input');
    const addToCartBtn = sectionElement.querySelector('#add-to-cart-btn');

    textInput.addEventListener('input', (e) => { konvaText.text(e.target.value || ' '); konvaText.offsetX(konvaText.width() / 2); layer.draw(); });
    fontSizeInput.addEventListener('input', (e) => { konvaText.fontSize(parseInt(e.target.value, 10)); konvaText.offsetX(konvaText.width() / 2); konvaText.offsetY(konvaText.height() / 2); layer.draw(); });
    colorInput.addEventListener('input', (e) => { konvaText.fill(e.target.value); layer.draw(); });
    addToCartBtn.addEventListener('click', (e) => {
      e.preventDefault();
      const productForm = document.querySelector('form[action*="/cart/add"]');
      const variantIdInput = productForm ? productForm.querySelector('[name="id"]') : null;
      if (!variantIdInput || !variantIdInput.value) { alert('错误：找不到产品变体ID。'); return; }
      const variantId = variantIdInput.value;
      backgroundRect.hide();
      layer.draw();
      const previewImage = stage.toDataURL({ pixelRatio: 2 });
      backgroundRect.show();
      layer.draw();
      const formData = { items: [{ id: variantId, quantity: 1, properties: { '_CustomTextPreview': previewImage, '定制文字': textInput.value, '字体大小': fontSizeInput.value, '字体颜色': colorInput.value }}] };
      fetch('/cart/add.js', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(formData) })
        .then(res => res.json()).then(data => { if (!data.status) { window.location.href = '/cart'; } else { alert('添加失败: ' + data.description); }})
        .catch(console.error);
    });
  };

  // ---- 终极解决方案：两阶段轮询启动器 ----
  const bootstrapper = () => {
    // 阶段一: 轮询等待 Konva 库加载完成
    console.log("Konva Log: 启动器已运行，等待 Konva 库加载...");
    const konvaCheckInterval = setInterval(() => {
      if (typeof window.Konva !== 'undefined') {
        clearInterval(konvaCheckInterval); // 停止第一阶段轮询
        console.log("Konva Log: 库已加载！现在等待 HTML 元素...");

        // 阶段二: Konva库已加载，现在轮询等待 HTML 元素渲染
        const sectionId = 'shopify-section-{{ section.id }}';
        const sectionElement = document.getElementById(sectionId);
        if (!sectionElement) return;

        const elementCheckInterval = setInterval(() => {
          const konvaContainer = sectionElement.querySelector('#konva-container');
          if (konvaContainer) {
            clearInterval(elementCheckInterval); // 停止第二阶段轮询
            // 所有条件都已满足，执行主程序！
            initializeKonvaApp(sectionElement);
          }
        }, 100);
        setTimeout(() => { clearInterval(elementCheckInterval); }, 5000); // 安全超时
      }
    }, 100);
    setTimeout(() => { clearInterval(konvaCheckInterval); }, 5000); // 安全超时
  };

  // 监听所有可能的加载事件来触发我们的启动器
  document.addEventListener('turbo:load', bootstrapper);
  document.addEventListener('shopify:section:load', bootstrapper);
  // 对于直接加载或硬刷新的情况
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', bootstrapper);
  } else {
    bootstrapper();
  }
</script>

{% schema %}
{
  "name": "Product Text Customizer",
  "settings": [],
  "presets": [
    {
      "name": "Product Text Customizer"
    }
  ]
}
{% endschema %}