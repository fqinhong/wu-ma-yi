{% comment %}
  版本 2.4: 集成纯色模式
  - 基于可正常显示颜色标签的版本 (2.2 修正版)。
  - 完整地加入了 "4. 选择色彩模式" 的所有功能 (HTML, JS, 和购物车逻辑)。
  - 这是一个包含截至目前所有功能的完整、稳定的版本。
{% endcomment %}

<style>
  .color-swatch.active {
    @apply ring-2 ring-offset-2 ring-indigo-600 ring-offset-white;
  }
</style>

<div class="page-width py-10 border-t border-gray-200">
  <div class="customizer-container flex flex-wrap gap-8">
    
    <div class="customizer-controls w-full md:w-1/3">
      <h3 class="text-xl font-bold mb-6">设计你的标签</h3>
      
      <!-- 1. 标签尺寸选择 -->
      <div class="control-group mb-5">
        <label class="block text-sm font-medium text-gray-700 mb-2">1. 选择标签尺寸:</label>
        <div id="size-selector" class="flex items-center gap-4">
          <div>
            <input type="radio" id="size-60x15" name="label-size" value="60x15" class="hidden peer" checked>
            <label for="size-60x15" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100">                           
              <div class="block">
                <div class="w-full text-sm font-semibold">2.36" x 0.59"</div>
                <div class="w-full text-xs">60 x 15 mm</div>
              </div>
            </label>
          </div>
          <div>
            <input type="radio" id="size-60x20" name="label-size" value="60x20" class="hidden peer">
            <label for="size-60x20" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100">
              <div class="block">
                <div class="w-full text-sm font-semibold">2.36" x 0.79"</div>
                <div class="w-full text-xs">60 x 20 mm</div>
              </div>
            </label>
          </div>
        </div>
      </div>
      
      <!-- 标签材质选择 -->
      <div class="control-group mb-5">
        <label class="block text-sm font-medium text-gray-700 mb-2">选择标签材质:</label>
        <div id="material-selector" class="flex items-center gap-4">
          <div>
            <input type="radio" id="material-fabric" name="label-material" value="{{ 'fabric.jpg' | asset_url }}" class="hidden peer" checked>
            <label for="material-fabric" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100">                           
              <div class="block">
                <div class="w-full text-sm font-semibold">布料</div>
                <div class="w-full text-xs">Fabric</div>
              </div>
            </label>
          </div>
          <div>
            <input type="radio" id="material-leather" name="label-material" value="{{ 'leather.jpg' | asset_url }}" class="hidden peer">
            <label for="material-leather" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100">
              <div class="block">
                <div class="w-full text-sm font-semibold">皮革</div>
                <div class="w-full text-xs">Leather</div>
              </div>
            </label>
          </div>
        </div>
      </div>

      <!-- 2. 标签“缝纫/熨烫”选择 -->
      <div class="control-group mb-5">
        <label class="block text-sm font-medium text-gray-700 mb-2">2. 选择固定方式:</label>
        <div id="fixing-type-selector" class="flex items-center gap-4">
          <div>
            <input type="radio" id="sew-on" name="fixing-type" value="Sew On" class="hidden peer" checked>
            <label for="sew-on" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100">                           
              <div class="block">
                <div class="w-full text-sm font-semibold">缝纫</div>
                <div class="w-full text-xs">Sew On</div>
              </div>
            </label>
          </div>
          <div>
            <input type="radio" id="iron-on" name="fixing-type" value="Iron On" class="hidden peer">
            <label for="iron-on" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100">
              <div class="block">
                <div class="w-full text-sm font-semibold">熨烫</div>
                <div class="w-full text-xs">Iron On</div>
              </div>
            </label>
          </div>
        </div>
      </div>

      <!-- 3. Label Color 选择 -->
      <div class="control-group mb-5">
        <label class="block text-sm font-medium text-gray-700 mb-2">3. 选择标签颜色:</label>
        <div id="label-color-selector" class="flex flex-wrap gap-2">
          <div title="White" data-color-name="White" data-color-hex="#FFFFFF" class="color-swatch active w-9 h-9 rounded-full cursor-pointer bg-cover bg-center transition hover:opacity-75" style="background-image: url('{{ "white.jpg" | asset_url }}')"></div>
          <div title="Apple Green" data-color-name="Apple Green" data-color-hex="#77B800" class="color-swatch w-9 h-9 rounded-full cursor-pointer bg-cover bg-center transition hover:opacity-75" style="background-image: url('{{ "applegreen.jpg" | asset_url }}')"></div>
          <div title="Black" data-color-name="Black" data-color-hex="#000000" class="color-swatch w-9 h-9 rounded-full cursor-pointer bg-cover bg-center transition hover:opacity-75" style="background-image: url('{{ "black.jpg" | asset_url }}')"></div>
          <div title="Blue" data-color-name="Blue" data-color-hex="#0000FF" class="color-swatch w-9 h-9 rounded-full cursor-pointer bg-cover bg-center transition hover:opacity-75" style="background-image: url('{{ "blue.jpg" | asset_url }}')"></div>
          <div title="Brown" data-color-name="Brown" data-color-hex="#A52A2A" class="color-swatch w-9 h-9 rounded-full cursor-pointer bg-cover bg-center transition hover:opacity-75" style="background-image: url('{{ "brown.jpg" | asset_url }}')"></div>
          <div title="Red" data-color-name="Red" data-color-hex="#FF0000" class="color-swatch w-9 h-9 rounded-full cursor-pointer bg-cover bg-center transition hover:opacity-75" style="background-image: url('{{ "red.jpg" | asset_url }}')"></div>
        </div>
      </div>

      <!-- [新增] 4. Pure Color 选择 -->
      <div class="control-group mb-5">
        <label class="block text-sm font-medium text-gray-700 mb-2">4. 选择色彩模式:</label>
        <div id="pure-color-selector" class="flex items-center gap-4">
          <div>
            <input type="radio" id="pure-color-standard" name="pure-color" value="Standard" class="hidden peer" checked>
            <label for="pure-color-standard" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100">                           
              <div class="block">
                <div class="w-full text-sm font-semibold">标准</div>
                <div class="w-full text-xs">Standard (show texture)</div>
              </div>
            </label>
          </div>
          <div>
            <input type="radio" id="pure-color-on" name="pure-color" value="Pure Color" class="hidden peer">
            <label for="pure-color-on" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100">
              <div class="block">
                <div class="w-full text-sm font-semibold">纯色</div>
                <div class="w-full text-xs">With Pure Color</div>
              </div>
            </label>
          </div>
        </div>
      </div>

      <div class="control-group mb-5">
        <label for="text-input" class="block text-sm font-medium text-gray-700 mb-1">输入文字:</label>
        <input type="text" id="text-input" placeholder="你的文字" class="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
      </div>
      <div class="control-group mb-5">
        <label for="font-size-input" class="block text-sm font-medium text-gray-700 mb-1">字体大小:</label>
        <input type="number" id="font-size-input" value="20" min="8" max="72" class="w-full p-2 border border-gray-300 rounded-md shadow-sm">
      </div>
      <div class="control-group mb-5">
        <label for="color-input" class="block text-sm font-medium text-gray-700 mb-1">字体颜色:</label>
        <input type="color" id="color-input" value="#000000" class="w-full h-10 p-1 border border-gray-300 rounded-md cursor-pointer">
      </div>
      <button id="add-to-cart-btn" class="w-full bg-indigo-600 text-white font-bold py-3 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
        添加到购物车
      </button>
    </div>

    <div class="canvas-wrapper w-full md:flex-1 bg-gray-50 border border-gray-200 rounded-md">
      <div id="konva-container"></div>
    </div>

  </div>
</div>

<script>
const initializeKonvaApp = (sectionElement) => {
  const konvaContainer = sectionElement.querySelector('#konva-container');
  if (!konvaContainer || konvaContainer.dataset.initialized === 'true') return;
  konvaContainer.dataset.initialized = 'true';

  console.log("Konva: 初始化开始 (版本 2.4 - 集成纯色模式)...");

  // --- 1. 获取所有 HTML 元素 ---
  const sizeSelector = sectionElement.querySelector('#size-selector');
  const fixingTypeSelector = sectionElement.querySelector('#fixing-type-selector');
  const materialSelector = sectionElement.querySelector('#material-selector');
  const labelColorSelector = sectionElement.querySelector('#label-color-selector');
  const pureColorSelector = sectionElement.querySelector('#pure-color-selector'); // [新增]
  const textInput = sectionElement.querySelector('#text-input');
  const fontSizeInput = sectionElement.querySelector('#font-size-input');
  const colorInput = sectionElement.querySelector('#color-input');
  const addToCartBtn = sectionElement.querySelector('#add-to-cart-btn');

  // --- 2. 初始化画布和 Konva 对象 ---
  const baseWidth = konvaContainer.parentElement.clientWidth || 500;
  const sizeRatios = { '60x15': 15 / 60, '60x20': 20 / 60 };
  const initialSizeValue = sizeSelector.querySelector('input[name="label-size"]:checked').value;
  const initialHeight = baseWidth * sizeRatios[initialSizeValue];

  konvaContainer.style.width = `${baseWidth}px`;
  konvaContainer.style.height = `${initialHeight}px`;

  const stage = new Konva.Stage({ container: konvaContainer, width: baseWidth, height: initialHeight });
  
  const mainLayer = new Konva.Layer();
  stage.add(mainLayer);
  const guideLayer = new Konva.Layer();
  stage.add(guideLayer);

  const backgroundRect = new Konva.Rect({ x: 0, y: 0, width: baseWidth, height: initialHeight, fill: '#f0f0f0' });
  mainLayer.add(backgroundRect);

  const colorOverlayRect = new Konva.Rect({
      x: 0, y: 0, width: baseWidth, height: initialHeight,
      fill: '#FFFFFF', opacity: 0, name: 'color-overlay'
  });
  mainLayer.add(colorOverlayRect);

  const konvaText = new Konva.Text({ x: stage.width() / 2, y: stage.height() / 2, text: '你的文字', fontSize: 30, fontFamily: 'Arial', fill: '#000000', draggable: true });
  mainLayer.add(konvaText);
  konvaText.offsetX(konvaText.width() / 2);
  konvaText.offsetY(konvaText.height() / 2);

  // --- 3. 定义可重用的函数 ---
  const GUIDELINE_OFFSET = 5;

  function getLineGuideStops() {
    const vertical = [0, stage.width() / 2, stage.width()];
    const horizontal = [0, stage.height() / 2, stage.height()];
    return { vertical, horizontal };
  }

  function getObjectSnappingEdges(node) {
    const box = node.getClientRect();
    const absPos = node.absolutePosition();
    return {
      vertical: [
        { guide: Math.round(box.x), offset: Math.round(absPos.x - box.x), snap: 'start' },
        { guide: Math.round(box.x + box.width / 2), offset: Math.round(absPos.x - box.x - box.width / 2), snap: 'center' },
        { guide: Math.round(box.x + box.width), offset: Math.round(absPos.x - box.x - box.width), snap: 'end' },
      ],
      horizontal: [
        { guide: Math.round(box.y), offset: Math.round(absPos.y - box.y), snap: 'start' },
        { guide: Math.round(box.y + box.height / 2), offset: Math.round(absPos.y - box.y - box.height / 2), snap: 'center' },
        { guide: Math.round(box.y + box.height), offset: Math.round(absPos.y - box.y - box.height), snap: 'end' },
      ],
    };
  }
  
  function drawGuides(guides) {
    guides.forEach((lg) => {
      let line = new Konva.Line({
        points: lg.orientation === 'H' ? [-6000, 0, 6000, 0] : [0, -6000, 0, 6000],
        stroke: 'rgb(0, 161, 255)',
        strokeWidth: 1,
        name: 'guid-line',
        dash: [4, 6],
      });
      guideLayer.add(line);
      line.absolutePosition({ x: lg.lineGuide, y: lg.lineGuide });
    });
  }

  const updateCanvasSize = (newSizeValue) => {
    const newRatio = sizeRatios[newSizeValue];
    const newHeight = baseWidth * newRatio;
    konvaContainer.style.height = `${newHeight}px`;
    stage.height(newHeight);
    backgroundRect.height(newHeight);
    colorOverlayRect.height(newHeight);
    konvaText.position({ x: baseWidth / 2, y: newHeight / 2 });
    stage.batchDraw();
  };

  const applyBaseMaterial = (materialUrl) => {
    const imageObj = new Image();
    imageObj.crossOrigin = 'Anonymous';
    imageObj.onload = () => {
      backgroundRect.fillPatternImage(imageObj);
      backgroundRect.fillPatternRepeat('repeat');
      backgroundRect.fill(null);
      mainLayer.batchDraw();
    };
    imageObj.src = materialUrl;
  };
  
  // [已更新] 函数现在会检查 "Pure Color" 的状态
  const applyLabelColor = (colorHex) => {
      colorOverlayRect.fill(colorHex);
      const isPureColor = pureColorSelector.querySelector('#pure-color-on').checked;

      if (isPureColor) {
          // 纯色模式: 任何颜色都完全不透明 (包括白色)
          colorOverlayRect.opacity(1.0);
      } else {
          // 标准模式: 白色=无色(透明), 其他颜色半透明
          if (colorHex.toUpperCase() === '#FFFFFF') {
              colorOverlayRect.opacity(0);
          } else {
              colorOverlayRect.opacity(0.7);
          }
      }
      mainLayer.batchDraw();
  };

  // --- 4. 绑定所有事件监听器 ---
  sizeSelector.addEventListener('change', (e) => {
    if (e.target.name === 'label-size') { updateCanvasSize(e.target.value); }
  });

  materialSelector.addEventListener('change', (e) => {
    if (e.target.name === 'label-material') { applyBaseMaterial(e.target.value); }
  });
  
  labelColorSelector.addEventListener('click', (e) => {
      const swatch = e.target.closest('.color-swatch');
      if (!swatch) return;

      labelColorSelector.querySelectorAll('.color-swatch').forEach(s => s.classList.remove('active'));
      swatch.classList.add('active');
      
      const newColor = swatch.dataset.colorHex;
      applyLabelColor(newColor);
  });

  // [新增] 为 "Pure Color" 选择器添加事件监听
  pureColorSelector.addEventListener('change', () => {
      const activeSwatch = labelColorSelector.querySelector('.color-swatch.active');
      if (activeSwatch) {
          applyLabelColor(activeSwatch.dataset.colorHex);
      }
  });
  
  textInput.addEventListener('input', (e) => { 
      konvaText.text(e.target.value || ' '); 
      konvaText.offsetX(konvaText.width() / 2); 
      mainLayer.batchDraw(); 
  });

  fontSizeInput.addEventListener('input', (e) => { 
      konvaText.fontSize(parseInt(e.target.value, 10)); 
      konvaText.offsetX(konvaText.width()/2); 
      konvaText.offsetY(konvaText.height()/2); 
      mainLayer.batchDraw(); 
  });

  colorInput.addEventListener('input', (e) => { 
      konvaText.fill(e.target.value); 
      mainLayer.batchDraw(); 
  });
  
  mainLayer.on('dragmove', (e) => {
    guideLayer.find('.guid-line').forEach((l) => l.destroy());
    const lineGuideStops = getLineGuideStops();
    const itemBounds = getObjectSnappingEdges(e.target);
    const guides = [];
    lineGuideStops.vertical.forEach((lineGuide) => {
      itemBounds.vertical.forEach((itemBound) => {
        const diff = Math.abs(lineGuide - itemBound.guide);
        if (diff < GUIDELINE_OFFSET) {
          e.target.x(Math.round(e.target.x() - (itemBound.guide - lineGuide)));
          guides.push({ lineGuide, orientation: 'V' });
        }
      });
    });
    lineGuideStops.horizontal.forEach((lineGuide) => {
      itemBounds.horizontal.forEach((itemBound) => {
        const diff = Math.abs(lineGuide - itemBound.guide);
        if (diff < GUIDELINE_OFFSET) {
          e.target.y(Math.round(e.target.y() - (itemBound.guide - lineGuide)));
          guides.push({ lineGuide, orientation: 'H' });
        }
      });
    });
    drawGuides(guides);
    guideLayer.batchDraw();
  });

  mainLayer.on('dragend', () => {
    guideLayer.find('.guid-line').forEach((l) => l.destroy());
    guideLayer.batchDraw();
  });

  // [已更新] "添加到购物车" 按钮事件
  addToCartBtn.addEventListener('click', (e) => {
    e.preventDefault();
    guideLayer.destroyChildren();

    const productForm = document.querySelector('form[action*="/cart/add"]');
    const variantIdInput = productForm ? productForm.querySelector('[name="id"]') : null;
    if (!variantIdInput || !variantIdInput.value) { alert('错误：找不到产品变体ID。'); return; }
    
    const selectedSize = sizeSelector.querySelector('input[name="label-size"]:checked').value;
    const selectedFixingType = fixingTypeSelector.querySelector('input[name="fixing-type"]:checked').value;
    const selectedMaterialInput = materialSelector.querySelector('input[name="label-material"]:checked');
    const selectedMaterialName = selectedMaterialInput.nextElementSibling.querySelector('.text-xs').textContent;
    const selectedColorSwatch = labelColorSelector.querySelector('.color-swatch.active');
    const selectedColorName = selectedColorSwatch ? selectedColorSwatch.dataset.colorName : 'N/A';
    const selectedPureColorMode = pureColorSelector.querySelector('input[name="pure-color"]:checked').value; // [新增]

    const previewImage = stage.toDataURL({ mimeType: 'image/jpeg', quality: 0.7 });

    const formData = {
      items: [{
        id: variantIdInput.value,
        quantity: 1,
        properties: {
          'CustomTextPreview': previewImage,
          '尺寸': selectedSize,
          '固定方式': selectedFixingType,
          '材质': selectedMaterialName,
          '标签颜色': selectedColorName,
          '色彩模式': selectedPureColorMode, // [新增]
          '定制文字': textInput.value,
          '字体大小': fontSizeInput.value,
          '字体颜色': colorInput.value,
        }
      }]
    };
    fetch('/cart/add.js', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(formData) })
      .then(res => res.json()).then(data => { if (!data.status) { window.location.href = '/cart'; } else { alert('添加失败: ' + data.description); }})
      .catch(console.error);
  });
  
  // --- 5. 最终初始化 ---
  const initialMaterialUrl = materialSelector.querySelector('input[name="label-material"]:checked').value;
  applyBaseMaterial(initialMaterialUrl);

  const initialColorSwatch = labelColorSelector.querySelector('.color-swatch.active');
  if (initialColorSwatch) {
      applyLabelColor(initialColorSwatch.dataset.colorHex);
  }

  stage.batchDraw();
  console.log("Konva: 初始化流程完成！ (版本 2.4)");
};
  
// ---- 启动器代码 (bootstrapper) ----
const bootstrapper = () => {
  const konvaCheckInterval = setInterval(() => {
    if (typeof window.Konva !== 'undefined') {
      clearInterval(konvaCheckInterval);
      const sectionId = 'shopify-section-{{ section.id }}';
      const sectionElement = document.getElementById(sectionId);
      if (!sectionElement) {
        console.error('Konva Initializer: Could not find section element with ID:', sectionId);
        return;
      }
      const elementCheckInterval = setInterval(() => {
        const konvaContainer = sectionElement.querySelector('#konva-container');
        if (konvaContainer) {
          clearInterval(elementCheckInterval);
          initializeKonvaApp(sectionElement);
        }
      }, 100);
      setTimeout(() => { clearInterval(elementCheckInterval); }, 5000);
    }
  }, 100);
  setTimeout(() => { clearInterval(konvaCheckInterval); }, 5000);
};

document.addEventListener('turbo:load', bootstrapper);
document.addEventListener('shopify:section:load', (event) => {
    const sectionElement = event.target;
    if (sectionElement && sectionElement.querySelector('#konva-container')) {
        initializeKonvaApp(sectionElement);
    }
});
if (document.readyState === 'loading') { 
    document.addEventListener('DOMContentLoaded', bootstrapper); 
} else { 
    bootstrapper(); 
}

</script>

{% schema %}
{
  "name": "Product Text Customizer",
  "settings": [],
  "presets": [
    {
      "name": "Product Text Customizer"
    }
  ]
}
{% endschema %}