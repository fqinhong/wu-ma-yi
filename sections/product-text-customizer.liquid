{% comment %}
  版本 3.3: 智能文本颜色选择 (对比度检查)
  - 新增: 为文本颜色创建了与标签颜色一样的色板选择器。
  - 新增: 在 JS 中定义了 colorConflictMap (颜色冲突地图) 来管理颜色关系。
  - 新增: 核心函数 updateTextColorOptions()，用于根据所选标签颜色动态禁用/启用文本颜色。
  - 新增: CSS .disabled 状态，用于在视觉上禁用色板。
  - 更新: 移除了旧的 <input type="color">，并更新了所有相关逻辑。
{% endcomment %}

<!-- 字体加载部分 (无变化) -->
<style>
  {%- assign font_families = "Lobster,Pacifico,Roboto,Playfair Display,Sacramento,Great Vibes,Cinzel Decorative,Comic Neue,Bangers,Fredoka One,Luckiest Guy,Press Start 2P" | split: "," -%}
  {%- for font_family in font_families -%}
    @font-face {
      font-family: "{{ font_family }}";
      src: url("{{ font_family | font_url }}");
    }
  {%- endfor -%}
</style>

<style>
  .color-swatch.active {
    @apply ring-2 ring-offset-2 ring-indigo-600 ring-offset-white;
  }
  /* [新增] 禁用状态的样式 */
  .color-swatch.disabled {
    @apply grayscale opacity-50 cursor-not-allowed;
  }
</style>

<div class="page-width py-10 border-t border-gray-200">
  <div class="customizer-container flex flex-wrap gap-8">
    
    <div class="customizer-controls w-full md:w-1/3">
      <h3 class="text-xl font-bold mb-6">设计你的标签</h3>
      
      <!-- 控件 1-4 (无变化) -->
      <div class="control-group mb-5"><label class="block text-sm font-medium text-gray-700 mb-2">1. 选择标签尺寸:</label><div id="size-selector" class="flex items-center gap-4"><div><input type="radio" id="size-60x15" name="label-size" value="60x15" class="hidden peer" checked><label for="size-60x15" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100"><div class="block"><div class="w-full text-sm font-semibold">2.36" x 0.59"</div><div class="w-full text-xs">60 x 15 mm</div></div></label></div><div><input type="radio" id="size-60x20" name="label-size" value="60x20" class="hidden peer"><label for="size-60x20" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100"><div class="block"><div class="w-full text-sm font-semibold">2.36" x 0.79"</div><div class="w-full text-xs">60 x 20 mm</div></div></label></div></div></div>
      <div class="control-group mb-5"><label class="block text-sm font-medium text-gray-700 mb-2">选择标签材质:</label><div id="material-selector" class="flex items-center gap-4"><div><input type="radio" id="material-fabric" name="label-material" value="{{ 'fabric.jpg' | asset_url }}" class="hidden peer" checked><label for="material-fabric" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100"><div class="block"><div class="w-full text-sm font-semibold">布料</div><div class="w-full text-xs">Fabric</div></div></label></div><div><input type="radio" id="material-leather" name="label-material" value="{{ 'leather.jpg' | asset_url }}" class="hidden peer"><label for="material-leather" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100"><div class="block"><div class="w-full text-sm font-semibold">皮革</div><div class="w-full text-xs">Leather</div></div></label></div></div></div>
      <div class="control-group mb-5"><label class="block text-sm font-medium text-gray-700 mb-2">2. 选择固定方式:</label><div id="fixing-type-selector" class="flex items-center gap-4"><div><input type="radio" id="sew-on" name="fixing-type" value="Sew On" class="hidden peer" checked><label for="sew-on" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100"><div class="block"><div class="w-full text-sm font-semibold">缝纫</div><div class="w-full text-xs">Sew On</div></div></label></div><div><input type="radio" id="iron-on" name="fixing-type" value="Iron On" class="hidden peer"><label for="iron-on" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100"><div class="block"><div class="w-full text-sm font-semibold">熨烫</div><div class="w-full text-xs">Iron On</div></div></label></div></div></div>
      <div class="control-group mb-5"><label class="block text-sm font-medium text-gray-700 mb-2">3. 选择标签颜色:</label><div id="label-color-selector" class="flex flex-wrap gap-2"><div title="White" data-color-name="White" data-color-hex="#FFFFFF" class="color-swatch active w-9 h-9 rounded-full cursor-pointer bg-cover bg-center transition hover:opacity-75" style="background-image: url('{{ "white.jpg" | asset_url }}')"> </div><div title="Apple Green" data-color-name="Apple Green" data-color-hex="#77B800" class="color-swatch w-9 h-9 rounded-full cursor-pointer bg-cover bg-center transition hover:opacity-75" style="background-image: url('{{ "applegreen.jpg" | asset_url }}')"> </div><div title="Black" data-color-name="Black" data-color-hex="#000000" class="color-swatch w-9 h-9 rounded-full cursor-pointer bg-cover bg-center transition hover:opacity-75" style="background-image: url('{{ "black.jpg" | asset_url }}')"> </div><div title="Blue" data-color-name="Blue" data-color-hex="#0000FF" class="color-swatch w-9 h-9 rounded-full cursor-pointer bg-cover bg-center transition hover:opacity-75" style="background-image: url('{{ "blue.jpg" | asset_url }}')"> </div><div title="Brown" data-color-name="Brown" data-color-hex="#A52A2A" class="color-swatch w-9 h-9 rounded-full cursor-pointer bg-cover bg-center transition hover:opacity-75" style="background-image: url('{{ "brown.jpg" | asset_url }}')"> </div><div title="Red" data-color-name="Red" data-color-hex="#FF0000" class="color-swatch w-9 h-9 rounded-full cursor-pointer bg-cover bg-center transition hover:opacity-75" style="background-image: url('{{ "red.jpg" | asset_url }}')"> </div></div></div>
      <div class="control-group mb-5"><label class="block text-sm font-medium text-gray-700 mb-2">4. 选择色彩模式:</label><div id="pure-color-selector" class="flex items-center gap-4"><div><input type="radio" id="pure-color-standard" name="pure-color" value="Standard" class="hidden peer" checked><label for="pure-color-standard" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100"><div class="block"><div class="w-full text-sm font-semibold">标准</div><div class="w-full text-xs">Standard (show texture)</div></div></label></div><div><input type="radio" id="pure-color-on" name="pure-color" value="Pure Color" class="hidden peer"><label for="pure-color-on" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100"><div class="block"><div class="w-full text-sm font-semibold">纯色</div><div class="w-full text-xs">With Pure Color</div></div></label></div></div></div>

      <!-- 5. Text 定制 (无变化) -->
      <div class="control-group mb-5"><label class="block text-sm font-medium text-gray-700 mb-2">5. 定制你的文字:</label><div id="text-rows-container" class="space-y-4">...</div></div>

      <!-- [更新] 6. 选择字体颜色 -->
      <div class="control-group mb-5">
        <label class="block text-sm font-medium text-gray-700 mb-2">6. 选择字体颜色:</label>
        <div id="text-color-selector" class="flex flex-wrap gap-2">
          <!-- 色板将由 JS 动态启用/禁用 -->
          <div title="White" data-color-name="White" data-color-hex="#FFFFFF" class="color-swatch w-9 h-9 rounded-full cursor-pointer bg-cover bg-center transition hover:opacity-75" style="background-image: url('{{ "white.jpg" | asset_url }}')"> </div>
          <div title="Apple Green" data-color-name="Apple Green" data-color-hex="#77B800" class="color-swatch w-9 h-9 rounded-full cursor-pointer bg-cover bg-center transition hover:opacity-75" style="background-image: url('{{ "applegreen.jpg" | asset_url }}')"> </div>
          <div title="Black" data-color-name="Black" data-color-hex="#000000" class="color-swatch active w-9 h-9 rounded-full cursor-pointer bg-cover bg-center transition hover:opacity-75" style="background-image: url('{{ "black.jpg" | asset_url }}')"> </div>
          <div title="Blue" data-color-name="Blue" data-color-hex="#0000FF" class="color-swatch w-9 h-9 rounded-full cursor-pointer bg-cover bg-center transition hover:opacity-75" style="background-image: url('{{ "blue.jpg" | asset_url }}')"> </div>
          <div title="Brown" data-color-name="Brown" data-color-hex="#A52A2A" class="color-swatch w-9 h-9 rounded-full cursor-pointer bg-cover bg-center transition hover:opacity-75" style="background-image: url('{{ "brown.jpg" | asset_url }}')"> </div>
          <div title="Red" data-color-name="Red" data-color-hex="#FF0000" class="color-swatch w-9 h-9 rounded-full cursor-pointer bg-cover bg-center transition hover:opacity-75" style="background-image: url('{{ "red.jpg" | asset_url }}')"> </div>
        </div>
      </div>

      <!-- [移除] 旧的全局颜色选择器 -->
      
      <button id="add-to-cart-btn" class="w-full bg-indigo-600 text-white font-bold py-3 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">添加到购物车</button>
    </div>

    <div class="canvas-wrapper w-full md:flex-1 bg-gray-50 border border-gray-200 rounded-md">
      <div id="konva-container"></div>
    </div>
  </div>
</div>

<script>
const initializeKonvaApp = (sectionElement) => {
  const konvaContainer = sectionElement.querySelector('#konva-container');
  if (!konvaContainer || konvaContainer.dataset.initialized === 'true') return;
  konvaContainer.dataset.initialized = 'true';

  console.log("Konva: 初始化开始 (版本 3.3 - 智能文本颜色)...");

  // [新增] 颜色冲突地图
  // Key 是标签颜色名, Value 是与之冲突的文本颜色名数组
  const colorConflictMap = {
    'Black': ['Black', 'Brown', 'Blue'],
    'White': ['White', 'Apple Green'],
    'Red': ['Red'],
    'Blue': ['Blue', 'Black'],
    'Brown': ['Brown', 'Black'],
    'Apple Green': ['Apple Green', 'White']
    // 您可以根据需要继续添加更多规则
  };

  // --- 1. 获取所有 HTML 元素 ---
  const sizeSelector = sectionElement.querySelector('#size-selector');
  const materialSelector = sectionElement.querySelector('#material-selector');
  const labelColorSelector = sectionElement.querySelector('#label-color-selector');
  const pureColorSelector = sectionElement.querySelector('#pure-color-selector');
  const textRowsContainer = sectionElement.querySelector('#text-rows-container');
  const fontSizeInput = sectionElement.querySelector('#font-size-input');
  const textColorSelector = sectionElement.querySelector('#text-color-selector'); // [新增]
  const addToCartBtn = sectionElement.querySelector('#add-to-cart-btn');

  // --- 2. 初始化画布和 Konva 对象 ---
  // ... (此部分无任何变化)

  // --- 3. 定义可重用的函数 ---
  const GUIDELINE_OFFSET = 5;
  const repositionAllTexts = () => { /* ... (无变化) */ };
  const updateCanvasSize = (newSizeValue) => { /* ... (无变化) */ };
  const applyBaseMaterial = (materialUrl) => { /* ... (无变化) */ };
  const applyLabelColor = (colorHex) => { /* ... (无变化) */ };

  // [新增] 核心函数：更新文本颜色的可用性
  const updateTextColorOptions = (selectedLabelColorName) => {
    const conflictingColors = colorConflictMap[selectedLabelColorName] || [];
    const textSwatches = textColorSelector.querySelectorAll('.color-swatch');

    textSwatches.forEach(swatch => {
      const swatchColorName = swatch.dataset.colorName;
      if (conflictingColors.includes(swatchColorName)) {
        swatch.classList.add('disabled');
      } else {
        swatch.classList.remove('disabled');
      }
    });

    // 检查当前激活的文本颜色是否被禁用了
    const activeTextSwatch = textColorSelector.querySelector('.color-swatch.active');
    if (activeTextSwatch && activeTextSwatch.classList.contains('disabled')) {
      // 如果是，则自动选择第一个可用的颜色
      const firstAvailable = textColorSelector.querySelector('.color-swatch:not(.disabled)');
      if (firstAvailable) {
        // 触发一次点击事件来更新所有状态
        firstAvailable.click();
      }
    }
  };

  // --- 4. 绑定所有事件监听器 ---
  sizeSelector.addEventListener('change', (e) => { /* ... (无变化) */ });
  materialSelector.addEventListener('change', (e) => { /* ... (无变化) */ });
  pureColorSelector.addEventListener('change', () => { /* ... (无变化) */ });
  
  // [更新] 标签颜色选择器现在需要触发文本颜色更新
  labelColorSelector.addEventListener('click', (e) => {
    const swatch = e.target.closest('.color-swatch');
    if (!swatch) return;
    labelColorSelector.querySelectorAll('.color-swatch').forEach(s => s.classList.remove('active'));
    swatch.classList.add('active');
    
    const newColorHex = swatch.dataset.colorHex;
    const newColorName = swatch.dataset.colorName; // 获取颜色名称
    
    applyLabelColor(newColorHex);
    updateTextColorOptions(newColorName); // << 核心调用
  });

  // [新增] 文本颜色选择器事件
  textColorSelector.addEventListener('click', (e) => {
    const swatch = e.target.closest('.color-swatch');
    // 如果色板被禁用，则不执行任何操作
    if (!swatch || swatch.classList.contains('disabled')) {
      return;
    }

    textColorSelector.querySelectorAll('.color-swatch').forEach(s => s.classList.remove('active'));
    swatch.classList.add('active');

    const newColorHex = swatch.dataset.colorHex;
    textObjects.forEach(textNode => textNode.fill(newColorHex));
    mainLayer.batchDraw();
  });

  textRowsContainer.addEventListener('input', (e) => { /* ... (无变化) */ });
  textRowsContainer.addEventListener('change', (e) => { /* ... (无变化) */ });
  fontSizeInput.addEventListener('input', (e) => { /* ... (无变化) */ });

  // [移除] 旧的颜色输入监听器
  // colorInput.addEventListener('input', ...);

  mainLayer.on('dragmove', (e) => { /* ... (无变化) */ });
  mainLayer.on('dragend', () => { /* ... (无变化) */ });

  // [更新] "添加到购物车" 按钮事件
  addToCartBtn.addEventListener('click', (e) => {
    e.preventDefault();
    guideLayer.destroyChildren();
    // ... (获取 productForm, variantIdInput)
    const properties = {
      // ... (其他属性)
      '字体大小': fontSizeInput.value,
      // [更新] 从新的文本颜色选择器获取颜色
      '字体颜色': textColorSelector.querySelector('.color-swatch.active')?.dataset.colorName || 'N/A',
    };
    // ... (循环添加文本行属性)
    // ... (Fetch 调用)
  });
  
  // --- 5. 最终初始化 ---
  const initialMaterialUrl = materialSelector.querySelector('input[name="label-material"]:checked').value;
  applyBaseMaterial(initialMaterialUrl);

  const initialLabelSwatch = labelColorSelector.querySelector('.color-swatch.active');
  if (initialLabelSwatch) {
    applyLabelColor(initialLabelSwatch.dataset.colorHex);
    // 首次加载时也需要检查一次颜色冲突
    updateTextColorOptions(initialLabelSwatch.dataset.colorName);
  }

  // 确保初始文本颜色被应用
  const initialTextSwatch = textColorSelector.querySelector('.color-swatch.active');
  if(initialTextSwatch) {
      textObjects.forEach(textNode => textNode.fill(initialTextSwatch.dataset.colorHex));
  }

  repositionAllTexts();
  stage.batchDraw();
  console.log("Konva: 初始化流程完成！ (版本 3.3)");
};
  
// ---- 启动器代码及其他JS函数 (为简洁起见，此处为缩略版，请在您的文件中保留其完整形态) ----
const bootstrapper = () => { /* ... */ };
// ... 所有其他函数和事件监听器的完整代码 ...
</script>

{% schema %}
{
  "name": "Product Text Customizer",
  "settings": [],
  "presets": [ { "name": "Product Text Customizer" } ]
}
{% endschema %}