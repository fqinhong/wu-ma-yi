<script>
  // 将我们的初始化代码包装在一个函数中
  const initializeCustomizer = function() {
    // 再次检查，确保是在产品页面上
    if (!document.querySelector('#konva-container')) {
      return; 
    }

    console.log("Konva 初始化程序启动...");

    const container = document.querySelector('#konva-container');
    const stageWidth = container.clientWidth;
    const stageHeight = container.clientHeight;

    if (stageWidth === 0) {
      console.warn("警告: 画布容器宽度为0。请检查CSS。");
    }

    const stage = new Konva.Stage({
      container: 'konva-container',
      width: stageWidth,
      height: stageHeight,
    });

    const layer = new Konva.Layer();
    stage.add(layer);

    const backgroundRect = new Konva.Rect({
      x: 0, y: 0, width: stageWidth, height: stageHeight,
      fill: '#FFFFFF', stroke: '#dddddd', strokeWidth: 1
    });
    layer.add(backgroundRect);

    const konvaText = new Konva.Text({
      x: stageWidth / 2,
      y: stageHeight / 2,
      text: '你的文字',
      fontSize: 20,
      fontFamily: 'Arial',
      fill: '#000000',
      draggable: true,
    });
    layer.add(konvaText);
    konvaText.offsetX(konvaText.width() / 2);
    konvaText.offsetY(konvaText.height() / 2);
    
    layer.draw();
    console.log("Konva 画布已绘制！现在应该能看到文字了。");

    // --- 事件监听 ---
    const textInput = document.getElementById('text-input');
    const fontSizeInput = document.getElementById('font-size-input');
    const colorInput = document.getElementById('color-input');

    textInput.addEventListener('input', (e) => {
      konvaText.text(e.target.value || ' '); // 使用一个空格作为空值的占位符，防止宽度计算错误
      konvaText.offsetX(konvaText.width() / 2);
      layer.draw();
    });

    fontSizeInput.addEventListener('input', (e) => {
      konvaText.fontSize(parseInt(e.target.value, 10));
      konvaText.offsetX(konvaText.width() / 2);
      konvaText.offsetY(konvaText.height() / 2);
      layer.draw();
    });

    colorInput.addEventListener('input', (e) => {
      konvaText.fill(e.target.value);
      layer.draw();
    });

    // --- 添加到购物车逻辑 ---
    const addToCartBtn = document.getElementById('add-to-cart-btn');
    addToCartBtn.addEventListener('click', function(e) {
      e.preventDefault();
      
      const variantIdInput = document.querySelector('form[action*="/cart/add"] input[name="id"]');
      if (!variantIdInput || !variantIdInput.value) {
        alert('错误：无法找到产品变体ID。请确保页面上有标准的“添加到购物车”表单。');
        return;
      }
      const variantId = variantIdInput.value;

      backgroundRect.hide();
      layer.draw();
      const previewImage = stage.toDataURL({ pixelRatio: 2 });
      backgroundRect.show();
      layer.draw();
      
      let formData = {
        'items': [{
          'id': variantId,
          'quantity': 1,
          'properties': {
            '_CustomTextPreview': previewImage,
            '定制文字': textInput.value,
            '字体大小': fontSizeInput.value,
            '字体颜色': colorInput.value
          }
        }]
      };
      
      fetch('/cart/add.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      })
      .then(response => response.json())
      .then(data => {
        if (data.status) {
          alert('添加失败: ' + data.description);
        } else {
          window.location.href = '/cart';
        }
      })
      .catch((error) => {
        console.error('添加到购物车时发生错误:', error);
      });
    });
  };

  // --- 健壮的脚本加载策略 ---
  // 监听 Shopify section 加载事件 (针对主题编辑器内的实时刷新)
  document.addEventListener('shopify:section:load', function(event) {
    if (event.detail.sectionId === '{{ section.id }}') {
      console.log("通过 shopify:section:load 事件加载定制器。");
      initializeCustomizer();
    }
  });

  // 标准的 DOM 加载事件 (针对正常的页面加载)
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeCustomizer);
  } else {
    // 如果页面已经加载完成
    console.log("DOM 已加载，直接初始化定制器。");
    initializeCustomizer();
  }
</script>