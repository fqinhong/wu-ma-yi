{% comment %}
  最终决战版: 我们不再依赖任何CSS来设定尺寸。
  脚本将直接用 JavaScript 为画布容器赋予一个固定的尺寸，
  以此来对抗主题中可能存在的、用于重置高度的脚本。
{% endcomment %}

<div class="page-width py-10 border-t border-gray-200">
  <div class="customizer-container flex flex-wrap gap-8">
    
    <div class="customizer-controls w-full md:w-1/3">
      <h3 class="text-xl font-bold mb-6">设计你的标签</h3>
      <div class="control-group mb-5">
        <label for="text-input" class="block text-sm font-medium text-gray-700 mb-1">输入文字:</label>
        <input type="text" id="text-input" placeholder="你的文字" class="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
      </div>
      <div class="control-group mb-5">
        <label for="font-size-input" class="block text-sm font-medium text-gray-700 mb-1">字体大小:</label>
        <input type="number" id="font-size-input" value="20" min="8" max="72" class="w-full p-2 border border-gray-300 rounded-md shadow-sm">
      </div>
      <div class="control-group mb-5">
        <label for="color-input" class="block text-sm font-medium text-gray-700 mb-1">字体颜色:</label>
        <input type="color" id="color-input" value="#000000" class="w-full h-10 p-1 border border-gray-300 rounded-md cursor-pointer">
      </div>
      <button id="add-to-cart-btn" class="w-full bg-indigo-600 text-white font-bold py-3 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
        添加到购物车
      </button>
    </div>

    <div class="canvas-wrapper w-full md:flex-1 bg-gray-50 border border-gray-200 rounded-md">
      <div id="konva-container"></div>
    </div>

  </div>
</div>

<script>
  const initializeKonvaApp = (sectionElement) => {
    const konvaContainer = sectionElement.querySelector('#konva-container');
    if (!konvaContainer || konvaContainer.dataset.initialized === 'true') return;
    konvaContainer.dataset.initialized = 'true';

    console.log("Konva: 初始化开始...");
    
    // 【最终决战策略：用JS直接设定尺寸】
    // 我们不再读取尺寸，而是强制写入尺寸，以覆盖主题JS的影响。
    const fixedWidth = konvaContainer.parentElement.clientWidth || 300; // 尝试获取父容器宽度，如果失败则使用500
    const fixedHeight = 150; // 直接定义一个固定的高度

    konvaContainer.style.width = `${fixedWidth}px`;
    konvaContainer.style.height = `${fixedHeight}px`;
    konvaContainer.style.border = '2px dashed blue'; // 添加一个可见边框用于最终诊断

    // 延迟一个极短的时间，确保style已应用
    setTimeout(() => {
        // 我们不再读取 clientWidth/Height，而是直接使用我们设定的值
        const stageWidth = fixedWidth;
        const stageHeight = fixedHeight;
        
        if (stageWidth === 0 || stageHeight === 0) {
            console.error("Konva 致命错误: 这不应该发生！");
            return;
        }

        console.log(`Konva: 已用JS强制设定尺寸: ${stageWidth}x${stageHeight}`);
        
        const stage = new Konva.Stage({ container: konvaContainer, width: stageWidth, height: stageHeight });
        const layer = new Konva.Layer();
        stage.add(layer);

        const backgroundRect = new Konva.Rect({ x: 0, y: 0, width: stageWidth, height: stageHeight, fill: '#FFFFFF', stroke: '#dddddd', strokeWidth: 1 });
        layer.add(backgroundRect);

        const konvaText = new Konva.Text({ x: stageWidth / 2, y: stageHeight / 2, text: '你的文字', fontSize: 30, fontFamily: 'Arial', fill: '#000000', draggable: true });
        layer.add(konvaText);
        konvaText.offsetX(konvaText.width() / 2);
        konvaText.offsetY(konvaText.height() / 2);
        
        layer.draw();
        console.log("Konva: 画布已绘制！");

        // ... 事件监听器代码保持不变 ...
        const textInput = sectionElement.querySelector('#text-input');
        const fontSizeInput = sectionElement.querySelector('#font-size-input');
        const colorInput = sectionElement.querySelector('#color-input');
        const addToCartBtn = sectionElement.querySelector('#add-to-cart-btn');

        textInput.addEventListener('input', (e) => { konvaText.text(e.target.value || ' '); konvaText.offsetX(konvaText.width() / 2); layer.draw(); });
        fontSizeInput.addEventListener('input', (e) => { konvaText.fontSize(parseInt(e.target.value, 10)); konvaText.offsetX(konvaText.width() / 2); konvaText.offsetY(konvaText.height() / 2); layer.draw(); });
        colorInput.addEventListener('input', (e) => { konvaText.fill(e.target.value); layer.draw(); });
        {% comment %} addToCartBtn.addEventListener('click', (e) => {
            e.preventDefault();
            const productForm = document.querySelector('form[action*="/cart/add"]');
            const variantIdInput = productForm ? productForm.querySelector('[name="id"]') : null;
            if (!variantIdInput || !variantIdInput.value) { alert('错误：找不到产品变体ID。'); return; }
            const variantId = variantIdInput.value;
            backgroundRect.hide();
            layer.draw();

            const previewImage = stage.toDataURL({ 
                mimeType: 'image/jpeg', // 告诉 Konva 生成 JPEG 图像
                quality: 0.7,           // 设定压缩质量 (0.7 是一个很好的起点，可以在 0.1 到 1 之间调整)
                pixelRatio: 1           // 确保 pixelRatio 仍然是 1
            });

            backgroundRect.show();
            layer.draw();
            const formData = { items: [{ id: variantId, quantity: 1, properties: { '_CustomTextPreview': previewImage, '定制文字': textInput.value, '字体大小': fontSizeInput.value, '字体颜色': colorInput.value }}] };
            fetch('/cart/add.js', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(formData) })
              .then(res => res.json()).then(data => { if (!data.status) { window.location.href = '/cart'; } else { alert('添加失败: ' + data.description); }})
              .catch(console.error);
        }); {% endcomment %}

        // 请用这个版本的代码完整替换您现有的 addToCartBtn 事件监听器

        addToCartBtn.addEventListener('click', (e) => {
            e.preventDefault();
            const productForm = document.querySelector('form[action*="/cart/add"]');
            const variantIdInput = productForm ? productForm.querySelector('[name="id"]') : null;
            if (!variantIdInput || !variantIdInput.value) { 
                alert('错误：找不到产品变体ID。'); 
                return; 
            }
            const variantId = variantIdInput.value;

            // 为了生成预览，我们暂时隐藏画布的背景和边框
            backgroundRect.hide();
            layer.draw();

            // 【极限压缩代码】
            // 使用 JPEG 格式，并把质量调低 (例如 0.6)，来强制减小文件大小
            // 画布尺寸已经在前面被设定为较小的值 (例如 300x150)
            const previewImage = stage.toDataURL({ 
                mimeType: 'image/jpeg', // 强制使用 JPEG
                quality: 0.6,           // 使用较低的质量来确保字符串长度足够短
                pixelRatio: 1           // 确保 pixelRatio 为 1
            });

            // 【关键的自我诊断】在F12控制台打印出压缩后的字符串长度
            console.log('压缩后的图像数据长度:', previewImage.length);

            // 恢复背景
            backgroundRect.show();
            layer.draw();

            // 获取其他文本属性的值
            const textInput = sectionElement.querySelector('#text-input');
            const fontSizeInput = sectionElement.querySelector('#font-size-input');
            const colorInput = sectionElement.querySelector('#color-input');

            const formData = {
                items: [{
                    id: variantId,
                    quantity: 1,
                    properties: {
                        // 我们现在同时发送图片和文本属性
                        '_CustomTextPreview': previewImage,
                        '定制文字': textInput.value,
                        '字体大小': fontSizeInput.value, 
                        '字体颜色': colorInput.value
                    }
                }]
            };

            fetch('/cart/add.js', { 
                method: 'POST', 
                headers: { 'Content-Type': 'application/json' }, 
                body: JSON.stringify(formData) 
            })
            .then(res => res.json())
            .then(data => { 
                if (!data.status) { 
                    window.location.href = '/cart'; 
                } else { 
                    alert('添加失败: ' + data.description); 
                }
            })
            .catch(console.error);
        });
        
    }, 100); // 稍微增加延迟，给JS样式应用留出时间
  };

  // ---- 终极启动器 (保持不变) ----
  const bootstrapper = () => {
    const konvaCheckInterval = setInterval(() => {
      if (typeof window.Konva !== 'undefined') {
        clearInterval(konvaCheckInterval);
        const sectionId = 'shopify-section-{{ section.id }}';
        const sectionElement = document.getElementById(sectionId);
        if (!sectionElement) return;
        const elementCheckInterval = setInterval(() => {
          const konvaContainer = sectionElement.querySelector('#konva-container');
          if (konvaContainer) {
            clearInterval(elementCheckInterval);
            initializeKonvaApp(sectionElement);
          }
        }, 100);
        setTimeout(() => { clearInterval(elementCheckInterval); }, 5000);
      }
    }, 100);
    setTimeout(() => { clearInterval(konvaCheckInterval); }, 5000);
  };
  document.addEventListener('turbo:load', bootstrapper);
  document.addEventListener('shopify:section:load', bootstrapper);
  if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', bootstrapper); } else { bootstrapper(); }
</script>

{% schema %}
{
  "name": "Product Text Customizer",
  "settings": [],
  "presets": [
    {
      "name": "Product Text Customizer"
    }
  ]
}
{% endschema %}