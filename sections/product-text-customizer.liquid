{% comment %}
  最终决战版: 我们不再依赖任何CSS来设定尺寸。
  脚本将直接用 JavaScript 为画布容器赋予一个固定的尺寸，
  以此来对抗主题中可能存在的、用于重置高度的脚本。
{% endcomment %}

<div class="page-width py-10 border-t border-gray-200">
  <div class="customizer-container flex flex-wrap gap-8">
    
    <div class="customizer-controls w-full md:w-1/3">
      <h3 class="text-xl font-bold mb-6">设计你的标签</h3>
      
      <!-- 标签尺寸选择 -->
      <div class="control-group mb-5">
        <label class="block text-sm font-medium text-gray-700 mb-2">1. 选择标签尺寸:</label>
        <div id="size-selector" class="flex items-center gap-4">
          
          <div>
            <input type="radio" id="size-60x15" name="label-size" value="60x15" class="hidden peer" checked>
            <label for="size-60x15" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100">                           
              <div class="block">
                <div class="w-full text-sm font-semibold">2.36" x 0.59"</div>
                <div class="w-full text-xs">60 x 15 mm</div>
              </div>
            </label>
          </div>

          <div>
            <input type="radio" id="size-60x20" name="label-size" value="60x20" class="hidden peer">
            <label for="size-60x20" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100">
              <div class="block">
                <div class="w-full text-sm font-semibold">2.36" x 0.79"</div>
                <div class="w-full text-xs">60 x 20 mm</div>
              </div>
            </label>
          </div>

        </div>
      </div>
      
      <!-- 标签“缝纫/熨烫”选择 -->
      <div class="control-group mb-5">
        <label class="block text-sm font-medium text-gray-700 mb-2">2. 选择固定方式:</label>
        <div id="fixing-type-selector" class="flex items-center gap-4">
          
          <div>
            <input type="radio" id="sew-on" name="fixing-type" value="Sew On" class="hidden peer" checked>
            <label for="sew-on" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100">                           
              <div class="block">
                <div class="w-full text-sm font-semibold">缝纫</div>
                <div class="w-full text-xs">Sew On</div>
              </div>
            </label>
          </div>

          <div>
            <input type="radio" id="iron-on" name="fixing-type" value="Iron On" class="hidden peer">
            <label for="iron-on" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100">
              <div class="block">
                <div class="w-full text-sm font-semibold">熨烫</div>
                <div class="w-full text-xs">Iron On</div>
              </div>
            </label>
          </div>

        </div>
      </div>

      <!-- 标签颜色 -->
      <div class="control-group mb-5">
        <label class="block text-sm font-medium text-gray-700 mb-2">3. 选择标签颜色:</label>
        <div id="label-color-palette" class="flex flex-wrap gap-3">
        
        <!-- 
          【关键修改】
          - data-color 属性现在存储的是纹理图片的URL。
          - style="background-image: url(...)" 用于在按钮上显示纹理预览。
        -->
        <button type="button" 
                data-color-url="{{ 'applegreen.jpg' | asset_url }}" 
                title="White" 
                class="w-10 h-10 rounded-full border border-gray-400 bg-cover bg-center" 
                style="background-image: url('{{ "applegreen.jpg" | asset_url }}')">
        </button>
        
        <button type="button" 
                data-color-url="{{ 'azure.jpg' | asset_url }}" 
                title="Black" 
                class="w-10 h-10 rounded-full border border-gray-400 bg-cover bg-center" 
                style="background-image: url('{{ "azure.jpg" | asset_url }}')">
        </button>

        <button type="button" 
                data-color-url="{{ 'black.jpg' | asset_url }}" 
                title="Red" 
                class="w-10 h-10 rounded-full border border-gray-400 bg-cover bg-center" 
                style="background-image: url('{{ "black.jpg" | asset_url }}')">
        </button>

        <button type="button" 
                data-color-url="{{ 'blue.jpg' | asset_url }}" 
                title="Red" 
                class="w-10 h-10 rounded-full border border-gray-400 bg-cover bg-center" 
                style="background-image: url('{{ "blue.jpg" | asset_url }}')">
        </button>

        <button type="button" 
                data-color-url="{{ 'brown.jpg' | asset_url }}" 
                title="Red" 
                class="w-10 h-10 rounded-full border border-gray-400 bg-cover bg-center" 
                style="background-image: url('{{ "brown.jpg" | asset_url }}')">
        </button>

        <button type="button" 
                data-color-url="{{ 'darkgrey.jpg' | asset_url }}" 
                title="Red" 
                class="w-10 h-10 rounded-full border border-gray-400 bg-cover bg-center" 
                style="background-image: url('{{ "darkgrey.jpg" | asset_url }}')">
        </button>        

        <button type="button" 
                data-color-url="{{ 'darkpink.jpg' | asset_url }}" 
                title="Red" 
                class="w-10 h-10 rounded-full border border-gray-400 bg-cover bg-center" 
                style="background-image: url('{{ "darkpink.jpg" | asset_url }}')">
        </button>

        <button type="button" 
                data-color-url="{{ 'darkpurple.jpg' | asset_url }}" 
                title="Red" 
                class="w-10 h-10 rounded-full border border-gray-400 bg-cover bg-center" 
                style="background-image: url('{{ "darkpurple.jpg" | asset_url }}')">
        </button>
        
        <button type="button" 
                data-color-url="{{ 'emerald.jpg' | asset_url }}" 
                title="Red" 
                class="w-10 h-10 rounded-full border border-gray-400 bg-cover bg-center" 
                style="background-image: url('{{ "emerald.jpg" | asset_url }}')">
        </button>   
        <button type="button" 
                data-color-url="{{ 'green.jpg' | asset_url }}" 
                title="Red" 
                class="w-10 h-10 rounded-full border border-gray-400 bg-cover bg-center" 
                style="background-image: url('{{ "green.jpg" | asset_url }}')">
        </button>        
        <button type="button" 
                data-color-url="{{ 'lemon.jpg' | asset_url }}" 
                title="Red" 
                class="w-10 h-10 rounded-full border border-gray-400 bg-cover bg-center" 
                style="background-image: url('{{ "lemon.jpg" | asset_url }}')">
        </button>     
        <!-- 
          注意：您有两种方式引用图片
          1. 如果您把图片上传到了主题的 Assets 文件夹，可以使用 {{ '图片名.jpg' | asset_url }}
          2. 如果您把图片上传到了后台的 "内容" -> "文件"，请直接粘贴您复制的 cdn.shopify.com 链接。
            例如: data-Color-url="https://cdn.shopify.com/..."
          我推荐使用第1种方法，因为它更稳定。
        -->

      </div>

      <!-- 我们用一个隐藏的 input 来存储当前选择的纹理URL -->
      <input type="hidden" id="selected-label-Color" value="{{ 'applegreen.jpg' | asset_url }}">
    </div>

      <!-- CSS 保持不变，但我们可以给父容器改个ID -->
      <style>
        #label-color-palette button.selected {
          box-shadow: 0 0 0 2px white, 0 0 0 4px #4f46e5;
        }
      </style>

      
      <div class="control-group mb-5">
        <label for="text-input" class="block text-sm font-medium text-gray-700 mb-1">输入文字:</label>
        <input type="text" id="text-input" placeholder="你的文字" class="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
      </div>
      <div class="control-group mb-5">
        <label for="font-size-input" class="block text-sm font-medium text-gray-700 mb-1">字体大小:</label>
        <input type="number" id="font-size-input" value="20" min="8" max="72" class="w-full p-2 border border-gray-300 rounded-md shadow-sm">
      </div>
      <div class="control-group mb-5">
        <label for="color-input" class="block text-sm font-medium text-gray-700 mb-1">字体颜色:</label>
        <input type="color" id="color-input" value="#000000" class="w-full h-10 p-1 border border-gray-300 rounded-md cursor-pointer">
      </div>
      <button id="add-to-cart-btn" class="w-full bg-indigo-600 text-white font-bold py-3 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
        添加到购物车
      </button>
    </div>

    <div class="canvas-wrapper w-full md:flex-1 bg-gray-50 border border-gray-200 rounded-md">
      <div id="konva-container"></div>
    </div>

  </div>
</div>

<script>
  // 请用这个版本完整替换您现有的 initializeKonvaApp 函数

    const initializeKonvaApp = (sectionElement) => {
  const konvaContainer = sectionElement.querySelector('#konva-container');
  if (!konvaContainer || konvaContainer.dataset.initialized === 'true') return;
  konvaContainer.dataset.initialized = 'true';

  console.log("Konva: 初始化开始...");

  // 1. --- 基本设置 (保持不变) ---
  const baseWidth = konvaContainer.parentElement.clientWidth || 500;
  konvaContainer.style.width = `${baseWidth}px`;
  konvaContainer.style.border = '2px dashed blue';

  // 2. --- 定义尺寸比例 (保持不变) ---
  const sizeRatios = {
    '60x15': 15 / 60,
    '60x20': 20 / 60
  };

  // 3. --- 获取HTML元素 ---
  const sizeSelector = sectionElement.querySelector('#size-selector');
  const labelColorPalette = sectionElement.querySelector('#label-Color-palette');
  const selectedLabelColorInput = sectionElement.querySelector('#selected-label-Color');
  const textInput = sectionElement.querySelector('#text-input');
  const fontSizeInput = sectionElement.querySelector('#font-size-input');
  const colorInput = sectionElement.querySelector('#color-input');
  const addToCartBtn = sectionElement.querySelector('#add-to-cart-btn');

  // 4. --- 【核心】先创建所有的Konva对象 ---
  
  // 确定初始高度
  const initialSizeValue = sizeSelector.querySelector('input[name="label-size"]:checked').value;
  const initialHeight = baseWidth * sizeRatios[initialSizeValue];
  konvaContainer.style.height = `${initialHeight}px`;

  // 创建舞台和图层
  const stage = new Konva.Stage({
    container: konvaContainer,
    width: baseWidth,
    height: initialHeight
  });
  const layer = new Konva.Layer();
  stage.add(layer);


  // 创建背景矩形
  const backgroundRect = new Konva.Rect({
    x: 0,
    y: 0,
    width: baseWidth,
    height: initialHeight,
    fill: '#FFFFFF', // 先给一个临时的白色背景
    stroke: '#dddddd',
    strokeWidth: 1
  });
  layer.add(backgroundRect);

  // 【新增】函数：用于加载并应用纹理
  const applyColor = (ColorUrl) => {
    const imageObj = new Image();
    imageObj.src = ColorUrl;
    imageObj.onload = () => {
      backgroundRect.fillPatternImage(imageObj);
      backgroundRect.fillPatternRepeat('repeat'); // 让纹理平铺
      layer.draw(); // 图片加载完成后，重绘图层
    };
  };

  // 初始化时，应用默认选中的纹理
  const initialColorUrl = selectedLabelColorInput.value;
  applyColor(initialColorUrl);

  // 创建文字对象
  const konvaText = new Konva.Text({
    x: stage.width() / 2,
    y: stage.height() / 2,
    text: '你的文字',
    fontSize: 30,
    fontFamily: 'Arial',
    fill: '#000000',
    draggable: true
  });
  layer.add(konvaText);
  konvaText.offsetX(konvaText.width() / 2);
  konvaText.offsetY(konvaText.height() / 2);
  
  // 初始绘制
  layer.draw();
  console.log("Konva: 所有对象已创建并初次绘制！");

  // 5. --- 【核心】现在，定义需要使用这些对象的函数 ---
  const updateCanvasSize = (newSizeValue) => {
    const newRatio = sizeRatios[newSizeValue];
    const newHeight = baseWidth * newRatio;

    // 更新容器、舞台和背景的尺寸
    konvaContainer.style.height = `${newHeight}px`;
    stage.width(baseWidth);
    stage.height(newHeight);
    backgroundRect.width(baseWidth);
    backgroundRect.height(newHeight);

    // 更新文字的位置到新的中心点
    konvaText.position({
      x: baseWidth / 2,
      y: newHeight / 2
    });
    
    layer.draw();
    console.log(`画布尺寸已更新为 ${newSizeValue}. 新尺寸: ${baseWidth}x${newHeight}`);
  };


  // 6. --- 绑定所有的事件监听器 ---

  // 尺寸选择器
  sizeSelector.addEventListener('change', (e) => {
    if (e.target.name === 'label-size') {
      updateCanvasSize(e.target.value);
    }
  });

  // 标签颜色选择器
  labelColorPalette.addEventListener('click', (e) => {
    const button = e.target.closest('button[data-Color-url]');
    if (!button) return;

    const newColorUrl = button.dataset.ColorUrl;
    
    // 1. 调用函数来应用新纹理
    applyColor(newColorUrl);

    // 2. 更新隐藏 input 的值
    selectedLabelColorInput.value = newColorUrl;

    // 3. 更新视觉选中状态
    labelColorPalette.querySelectorAll('button').forEach(btn => btn.classList.remove('selected'));
    button.classList.add('selected');
  });

  // 【新增】初始化选中状态
  const initialButton = labelColorPalette.querySelector(`button[data-Color-url="${initialColorUrl}"]`);
  if (initialButton) {
      initialButton.classList.add('selected');
  }


  // 文字输入
  textInput.addEventListener('input', (e) => {
    konvaText.text(e.target.value || ' ');
    konvaText.offsetX(konvaText.width() / 2);
    layer.draw();
  });

  // 字体大小
  fontSizeInput.addEventListener('input', (e) => {
    konvaText.fontSize(parseInt(e.target.value, 10));
    konvaText.offsetX(konvaText.width() / 2);
    konvaText.offsetY(konvaText.height() / 2);
    layer.draw();
  });

  // 颜色选择
  colorInput.addEventListener('input', (e) => {
    konvaText.fill(e.target.value);
    layer.draw();
  });

  // 添加到购物车
  addToCartBtn.addEventListener('click', (e) => {
    e.preventDefault();
    const productForm = document.querySelector('form[action*="/cart/add"]');
    const variantIdInput = productForm ? productForm.querySelector('[name="id"]') : null;
    if (!variantIdInput || !variantIdInput.value) {
      alert('错误：找不到产品变体ID。');
      return;
    }
    const variantId = variantIdInput.value;
    
    // 1. 获取“尺寸选择”的值
    const selectedSize = sizeSelector.querySelector('input[name="label-size"]:checked').value;

    // 2. 【新增】获取“固定方式”的值
    const fixingTypeSelector = sectionElement.querySelector('#fixing-type-selector');
    const selectedFixingType = fixingTypeSelector.querySelector('input[name="fixing-type"]:checked').value;
    const selectedLabelColor = selectedLabelColorInput.value; // <--- 【新增】获取标签颜色
    const selectedColorName = selectedLabelColor.split('/').pop().split('?')[0];


    layer.draw(); // 确保是最新状态
    const previewImage = stage.toDataURL({ mimeType: 'image/jpeg', quality: 0.7 });

    const formData = {
      items: [{
        id: variantId,
        quantity: 1,
        properties: {
          'CustomTextPreview': previewImage,
          '尺寸': selectedSize,
          '固定方式': selectedFixingType,
          '标签颜色': selectedColorName,
          '定制文字': textInput.value,
          '字体大小': fontSizeInput.value,
          '字体颜色': colorInput.value
        }
      }]
    };
    fetch('/cart/add.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      })
      .then(res => res.json()).then(data => {
        if (!data.status) {
          window.location.href = '/cart';
        } else {
          alert('添加失败: ' + data.description);
        }
      })
      .catch(console.error);
  });

}; // <-- initializeKonvaApp 函数结束

  // ---- 启动器代码 (bootstrapper) 保持不变 ----

  // ---- 终极启动器 (保持不变) ----
  const bootstrapper = () => {
    const konvaCheckInterval = setInterval(() => {
      if (typeof window.Konva !== 'undefined') {
        clearInterval(konvaCheckInterval);
        const sectionId = 'shopify-section-{{ section.id }}';
        const sectionElement = document.getElementById(sectionId);
        if (!sectionElement) return;
        const elementCheckInterval = setInterval(() => {
          const konvaContainer = sectionElement.querySelector('#konva-container');
          if (konvaContainer) {
            clearInterval(elementCheckInterval);
            initializeKonvaApp(sectionElement);
          }
        }, 100);
        setTimeout(() => { clearInterval(elementCheckInterval); }, 5000);
      }
    }, 100);
    setTimeout(() => { clearInterval(konvaCheckInterval); }, 5000);
  };
  document.addEventListener('turbo:load', bootstrapper);
  document.addEventListener('shopify:section:load', bootstrapper);
  if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', bootstrapper); } else { bootstrapper(); }
</script>

{% schema %}
{
  "name": "Product Text Customizer",
  "settings": [],
  "presets": [
    {
      "name": "Product Text Customizer"
    }
  ]
}
{% endschema %}