{% comment %}
  版本 3.0: 多行文本和字体选择
  - 新增: 通过 Google Fonts 加载多种字体。
  - 重构 HTML: 将单行文本输入改为三行，每行都配有独立的字体选择下拉菜单。
  - 重构 JavaScript:
    - 现在创建并管理三个独立的 Konva.Text 对象。
    - 实现了文本对象的自动垂直布局。
    - 使用事件委托来高效处理三行文本的输入和字体更改。
  - 更新了加入购物车逻辑，以分别记录三行文本及其字体。
{% endcomment %}

<!-- [新增] 通过 Google Fonts 加载多种字体 -->
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Lobster&family=Pacifico&family=Roboto&family=Playfair+Display&display=swap" rel="stylesheet">

<style>
  .color-swatch.active {
    @apply ring-2 ring-offset-2 ring-indigo-600 ring-offset-white;
  }
</style>

<div class="page-width py-10 border-t border-gray-200">
  <div class="customizer-container flex flex-wrap gap-8">
    
    <div class="customizer-controls w-full md:w-1/3">
      <h3 class="text-xl font-bold mb-6">设计你的标签</h3>
      
      <!-- 1. 标签尺寸选择 (无变化) -->
      <div class="control-group mb-5"><label class="block text-sm font-medium text-gray-700 mb-2">1. 选择标签尺寸:</label><div id="size-selector" class="flex items-center gap-4"><div><input type="radio" id="size-60x15" name="label-size" value="60x15" class="hidden peer" checked><label for="size-60x15" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100"><div class="block"><div class="w-full text-sm font-semibold">2.36" x 0.59"</div><div class="w-full text-xs">60 x 15 mm</div></div></label></div><div><input type="radio" id="size-60x20" name="label-size" value="60x20" class="hidden peer"><label for="size-60x20" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100"><div class="block"><div class="w-full text-sm font-semibold">2.36" x 0.79"</div><div class="w-full text-xs">60 x 20 mm</div></div></label></div></div></div>
      
      <!-- 标签材质选择 (无变化) -->
      <div class="control-group mb-5"><label class="block text-sm font-medium text-gray-700 mb-2">选择标签材质:</label><div id="material-selector" class="flex items-center gap-4"><div><input type="radio" id="material-fabric" name="label-material" value="{{ 'fabric.jpg' | asset_url }}" class="hidden peer" checked><label for="material-fabric" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100"><div class="block"><div class="w-full text-sm font-semibold">布料</div><div class="w-full text-xs">Fabric</div></div></label></div><div><input type="radio" id="material-leather" name="label-material" value="{{ 'leather.jpg' | asset_url }}" class="hidden peer"><label for="material-leather" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100"><div class="block"><div class="w-full text-sm font-semibold">皮革</div><div class="w-full text-xs">Leather</div></div></label></div></div></div>

      <!-- 2. 固定方式选择 (无变化) -->
      <div class="control-group mb-5"><label class="block text-sm font-medium text-gray-700 mb-2">2. 选择固定方式:</label><div id="fixing-type-selector" class="flex items-center gap-4"><div><input type="radio" id="sew-on" name="fixing-type" value="Sew On" class="hidden peer" checked><label for="sew-on" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100"><div class="block"><div class="w-full text-sm font-semibold">缝纫</div><div class="w-full text-xs">Sew On</div></div></label></div><div><input type="radio" id="iron-on" name="fixing-type" value="Iron On" class="hidden peer"><label for="iron-on" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100"><div class="block"><div class="w-full text-sm font-semibold">熨烫</div><div class="w-full text-xs">Iron On</div></div></label></div></div></div>

      <!-- 3. 标签颜色选择 (无变化) -->
      <div class="control-group mb-5"><label class="block text-sm font-medium text-gray-700 mb-2">3. 选择标签颜色:</label><div id="label-color-selector" class="flex flex-wrap gap-2"><div title="White" data-color-name="White" data-color-hex="#FFFFFF" class="color-swatch active w-9 h-9 rounded-full cursor-pointer bg-cover bg-center transition hover:opacity-75" style="background-image: url('{{ "white.jpg" | asset_url }}')"> </div><div title="Apple Green" data-color-name="Apple Green" data-color-hex="#77B800" class="color-swatch w-9 h-9 rounded-full cursor-pointer bg-cover bg-center transition hover:opacity-75" style="background-image: url('{{ "applegreen.jpg" | asset_url }}')"> </div><div title="Black" data-color-name="Black" data-color-hex="#000000" class="color-swatch w-9 h-9 rounded-full cursor-pointer bg-cover bg-center transition hover:opacity-75" style="background-image: url('{{ "black.jpg" | asset_url }}')"> </div><div title="Blue" data-color-name="Blue" data-color-hex="#0000FF" class="color-swatch w-9 h-9 rounded-full cursor-pointer bg-cover bg-center transition hover:opacity-75" style="background-image: url('{{ "blue.jpg" | asset_url }}')"> </div><div title="Brown" data-color-name="Brown" data-color-hex="#A52A2A" class="color-swatch w-9 h-9 rounded-full cursor-pointer bg-cover bg-center transition hover:opacity-75" style="background-image: url('{{ "brown.jpg" | asset_url }}')"> </div><div title="Red" data-color-name="Red" data-color-hex="#FF0000" class="color-swatch w-9 h-9 rounded-full cursor-pointer bg-cover bg-center transition hover:opacity-75" style="background-image: url('{{ "red.jpg" | asset_url }}')"> </div></div></div>

      <!-- 4. 色彩模式选择 (无变化) -->
      <div class="control-group mb-5"><label class="block text-sm font-medium text-gray-700 mb-2">4. 选择色彩模式:</label><div id="pure-color-selector" class="flex items-center gap-4"><div><input type="radio" id="pure-color-standard" name="pure-color" value="Standard" class="hidden peer" checked><label for="pure-color-standard" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100"><div class="block"><div class="w-full text-sm font-semibold">标准</div><div class="w-full text-xs">Standard (show texture)</div></div></label></div><div><input type="radio" id="pure-color-on" name="pure-color" value="Pure Color" class="hidden peer"><label for="pure-color-on" class="inline-flex items-center justify-between w-full p-3 text-gray-500 bg-white border border-gray-200 rounded-lg cursor-pointer peer-checked:border-indigo-600 peer-checked:text-indigo-600 hover:text-gray-600 hover:bg-gray-100"><div class="block"><div class="w-full text-sm font-semibold">纯色</div><div class="w-full text-xs">With Pure Color</div></div></label></div></div></div>

      <!-- [重构] 5. Text 定制 -->
      <div class="control-group mb-5">
        <label class="block text-sm font-medium text-gray-700 mb-2">5. 定制你的文字:</label>
        
        <div id="text-rows-container" class="space-y-4">
          <!-- Text Row 1 -->
          <div class="text-row-item border p-3 rounded-md">
            <label for="text-input-1" class="block text-xs font-medium text-gray-500">Text Row 1</label>
            <input type="text" id="text-input-1" data-row-index="0" placeholder="第一行文字" class="text-input w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 mb-2">
            <label for="font-selector-1" class="block text-xs font-medium text-gray-500 mt-2">Choose Font</label>
            <select id="font-selector-1" data-row-index="0" class="font-selector w-full p-2 border border-gray-300 rounded-md shadow-sm">
              <option value="Roboto" style="font-family: 'Roboto', sans-serif;">Roboto</option>
              <option value="Playfair Display" style="font-family: 'Playfair Display', serif;">Playfair Display</option>
              <option value="Lobster" style="font-family: 'Lobster', cursive;">Lobster</option>
              <option value="Pacifico" style="font-family: 'Pacifico', cursive;">Pacifico</option>
              <option value="Arial" style="font-family: Arial, sans-serif;">Arial</option>
              <option value="Georgia" style="font-family: Georgia, serif;">Georgia</option>
            </select>
          </div>
          <!-- Text Row 2 -->
          <div class="text-row-item border p-3 rounded-md">
            <label for="text-input-2" class="block text-xs font-medium text-gray-500">Text Row 2</label>
            <input type="text" id="text-input-2" data-row-index="1" placeholder="第二行文字" class="text-input w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 mb-2">
            <label for="font-selector-2" class="block text-xs font-medium text-gray-500 mt-2">Choose Font</label>
            <select id="font-selector-2" data-row-index="1" class="font-selector w-full p-2 border border-gray-300 rounded-md shadow-sm">
              <option value="Roboto" style="font-family: 'Roboto', sans-serif;">Roboto</option>
              <option value="Playfair Display" style="font-family: 'Playfair Display', serif;">Playfair Display</option>
              <option value="Lobster" style="font-family: 'Lobster', cursive;">Lobster</option>
              <option value="Pacifico" style="font-family: 'Pacifico', cursive;">Pacifico</option>
              <option value="Arial" style="font-family: Arial, sans-serif;">Arial</option>
              <option value="Georgia" style="font-family: Georgia, serif;">Georgia</option>
            </select>
          </div>
          <!-- Text Row 3 -->
          <div class="text-row-item border p-3 rounded-md">
            <label for="text-input-3" class="block text-xs font-medium text-gray-500">Text Row 3</label>
            <input type="text" id="text-input-3" data-row-index="2" placeholder="第三行文字" class="text-input w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 mb-2">
            <label for="font-selector-3" class="block text-xs font-medium text-gray-500 mt-2">Choose Font</label>
            <select id="font-selector-3" data-row-index="2" class="font-selector w-full p-2 border border-gray-300 rounded-md shadow-sm">
              <option value="Roboto" style="font-family: 'Roboto', sans-serif;">Roboto</option>
              <option value="Playfair Display" style="font-family: 'Playfair Display', serif;">Playfair Display</option>
              <option value="Lobster" style="font-family: 'Lobster', cursive;">Lobster</option>
              <option value="Pacifico" style="font-family: 'Pacifico', cursive;">Pacifico</option>
              <option value="Arial" style="font-family: Arial, sans-serif;">Arial</option>
              <option value="Georgia" style="font-family: Georgia, serif;">Georgia</option>
            </select>
          </div>
        </div>
      </div>
      
      <!-- [保留] 全局字体大小和颜色 -->
      <div class="control-group mb-5">
        <label for="font-size-input" class="block text-sm font-medium text-gray-700 mb-1">字体大小 (应用于所有行):</label>
        <input type="number" id="font-size-input" value="20" min="8" max="72" class="w-full p-2 border border-gray-300 rounded-md shadow-sm">
      </div>
      <div class="control-group mb-5">
        <label for="color-input" class="block text-sm font-medium text-gray-700 mb-1">字体颜色 (应用于所有行):</label>
        <input type="color" id="color-input" value="#000000" class="w-full h-10 p-1 border border-gray-300 rounded-md cursor-pointer">
      </div>

      <button id="add-to-cart-btn" class="w-full bg-indigo-600 text-white font-bold py-3 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
        添加到购物车
      </button>
    </div>

    <div class="canvas-wrapper w-full md:flex-1 bg-gray-50 border border-gray-200 rounded-md">
      <div id="konva-container"></div>
    </div>

  </div>
</div>

<script>
const initializeKonvaApp = (sectionElement) => {
  const konvaContainer = sectionElement.querySelector('#konva-container');
  if (!konvaContainer || konvaContainer.dataset.initialized === 'true') return;
  konvaContainer.dataset.initialized = 'true';

  console.log("Konva: 初始化开始 (版本 3.0 - 多行文本)...");

  // --- 1. 获取所有 HTML 元素 ---
  const sizeSelector = sectionElement.querySelector('#size-selector');
  const fixingTypeSelector = sectionElement.querySelector('#fixing-type-selector');
  const materialSelector = sectionElement.querySelector('#material-selector');
  const labelColorSelector = sectionElement.querySelector('#label-color-selector');
  const pureColorSelector = sectionElement.querySelector('#pure-color-selector');
  const textRowsContainer = sectionElement.querySelector('#text-rows-container'); // [新增]
  const fontSizeInput = sectionElement.querySelector('#font-size-input');
  const colorInput = sectionElement.querySelector('#color-input');
  const addToCartBtn = sectionElement.querySelector('#add-to-cart-btn');

  // --- 2. 初始化画布和 Konva 对象 ---
  const baseWidth = konvaContainer.parentElement.clientWidth || 500;
  const sizeRatios = { '60x15': 15 / 60, '60x20': 20 / 60 };
  const initialSizeValue = sizeSelector.querySelector('input[name="label-size"]:checked').value;
  const initialHeight = baseWidth * sizeRatios[initialSizeValue];

  konvaContainer.style.width = `${baseWidth}px`;
  konvaContainer.style.height = `${initialHeight}px`;

  const stage = new Konva.Stage({ container: konvaContainer, width: baseWidth, height: initialHeight });
  const mainLayer = new Konva.Layer();
  stage.add(mainLayer);
  const guideLayer = new Konva.Layer();
  stage.add(guideLayer);

  const backgroundRect = new Konva.Rect({ x: 0, y: 0, width: baseWidth, height: initialHeight, fill: '#f0f0f0' });
  mainLayer.add(backgroundRect);
  const colorOverlayRect = new Konva.Rect({ x: 0, y: 0, width: baseWidth, height: initialHeight, fill: '#FFFFFF', opacity: 0, name: 'color-overlay' });
  mainLayer.add(colorOverlayRect);

  // [重构] 创建并管理三个 Text 对象
  const textObjects = [];
  const NUM_TEXT_ROWS = 3;
  for (let i = 0; i < NUM_TEXT_ROWS; i++) {
    const textNode = new Konva.Text({
      x: stage.width() / 2,
      y: 0, // 初始 Y 值，稍后由函数设置
      text: i === 0 ? '第一行文字' : '', // 默认只有第一行有文字
      fontSize: 20,
      fontFamily: 'Roboto',
      fill: '#000000',
      draggable: true,
      name: `text-line-${i}`
    });
    textObjects.push(textNode);
    mainLayer.add(textNode);
  }

  // --- 3. 定义可重用的函数 ---
  const GUIDELINE_OFFSET = 5;

  // [新增] 自动垂直布局文本的函数
  const repositionAllTexts = () => {
    const activeTexts = textObjects.filter(t => t.text()); // 只计算有内容的文本
    if (activeTexts.length === 0) return;

    const totalHeight = activeTexts.reduce((sum, t) => sum + t.height(), 0);
    let startY = (stage.height() - totalHeight) / 2;
    
    // 重新定位所有文本对象
    textObjects.forEach(textNode => {
      textNode.x(stage.width() / 2); // 确保X轴居中
      textNode.offsetX(textNode.width() / 2); // 更新中心点

      if (textNode.text()) {
        textNode.y(startY);
        textNode.offsetY(0); // Y轴对齐顶部
        startY += textNode.height();
      } else {
        // 没有内容的文本移出可视区
        textNode.y(-1000);
      }
    });
    mainLayer.batchDraw();
  };


  const updateCanvasSize = (newSizeValue) => {
    const newRatio = sizeRatios[newSizeValue];
    const newHeight = baseWidth * newRatio;
    konvaContainer.style.height = `${newHeight}px`;
    stage.height(newHeight);
    backgroundRect.height(newHeight);
    colorOverlayRect.height(newHeight);
    repositionAllTexts(); // 画布尺寸变化，重新布局文本
    stage.batchDraw();
  };

  const applyBaseMaterial = (materialUrl) => { /* ... (无变化) */ };
  const applyLabelColor = (colorHex) => { /* ... (无变化) */ };
  function getLineGuideStops() { /* ... (无变化) */ }
  function getObjectSnappingEdges(node) { /* ... (无变化) */ }
  function drawGuides(guides) { /* ... (无变化) */ }


  // --- 4. 绑定所有事件监听器 ---
  sizeSelector.addEventListener('change', (e) => {
    if (e.target.name === 'label-size') { updateCanvasSize(e.target.value); }
  });
  materialSelector.addEventListener('change', (e) => { /* ... */ });
  labelColorSelector.addEventListener('click', (e) => { /* ... */ });
  pureColorSelector.addEventListener('change', () => { /* ... */ });
  
  // [新增] 使用事件委托处理多行文本输入和字体选择
  textRowsContainer.addEventListener('input', (e) => {
    if (e.target.classList.contains('text-input')) {
      const index = e.target.dataset.rowIndex;
      const textNode = textObjects[index];
      textNode.text(e.target.value);
      repositionAllTexts();
    }
  });

  textRowsContainer.addEventListener('change', (e) => {
    if (e.target.classList.contains('font-selector')) {
      const index = e.target.dataset.rowIndex;
      const textNode = textObjects[index];
      textNode.fontFamily(e.target.value);
      repositionAllTexts();
    }
  });

  // [更新] 全局字体大小和颜色监听
  fontSizeInput.addEventListener('input', (e) => { 
      const newSize = parseInt(e.target.value, 10);
      textObjects.forEach(textNode => textNode.fontSize(newSize));
      repositionAllTexts();
  });

  colorInput.addEventListener('input', (e) => { 
      textObjects.forEach(textNode => textNode.fill(e.target.value));
      mainLayer.batchDraw(); 
  });
  
  // 智能对齐线事件监听 (现在对每个文本对象都有效)
  mainLayer.on('dragmove', (e) => { /* ... (无变化) */ });
  mainLayer.on('dragend', () => { /* ... (无变化) */ });

  // [更新] "添加到购物车" 按钮事件
  addToCartBtn.addEventListener('click', (e) => {
    e.preventDefault();
    guideLayer.destroyChildren();

    const productForm = document.querySelector('form[action*="/cart/add"]');
    const variantIdInput = productForm ? productForm.querySelector('[name="id"]') : null;
    if (!variantIdInput || !variantIdInput.value) { alert('错误：找不到产品变体ID。'); return; }
    
    // 基本属性
    const properties = {
      'CustomTextPreview': stage.toDataURL({ mimeType: 'image/jpeg', quality: 0.7 }),
      '尺寸': sizeSelector.querySelector('input[name="label-size"]:checked').value,
      '固定方式': fixingTypeSelector.querySelector('input[name="fixing-type"]:checked').value,
      '材质': materialSelector.querySelector('input[name="label-material"]:checked').nextElementSibling.querySelector('.text-xs').textContent,
      '标签颜色': labelColorSelector.querySelector('.color-swatch.active')?.dataset.colorName || 'N/A',
      '色彩模式': pureColorSelector.querySelector('input[name="pure-color"]:checked').value,
      '字体大小': fontSizeInput.value,
      '字体颜色': colorInput.value,
    };

    // [更新] 循环添加三行文本的属性
    for (let i = 0; i < NUM_TEXT_ROWS; i++) {
      const textVal = sectionElement.querySelector(`#text-input-${i+1}`).value;
      if (textVal) { // 只添加有内容的行
        properties[`Text Line ${i+1}`] = textVal;
        properties[`Font Line ${i+1}`] = sectionElement.querySelector(`#font-selector-${i+1}`).value;
      }
    }

    const formData = { items: [{ id: variantIdInput.value, quantity: 1, properties }] };
    fetch('/cart/add.js', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(formData) })
      .then(res => res.json()).then(data => { if (!data.status) { window.location.href = '/cart'; } else { alert('添加失败: ' + data.description); }})
      .catch(console.error);
  });
  
  // --- 5. 最终初始化 ---
  // (此处省略了部分无变化的代码以保持简洁, 您的文件中应保留其完整形态)
  const applyBaseMaterial_full=(e)=>{const t=new Image;t.crossOrigin="Anonymous",t.onload=()=>{backgroundRect.fillPatternImage(t),backgroundRect.fillPatternRepeat("repeat"),backgroundRect.fill(null),mainLayer.batchDraw()},t.src=e};
  const applyLabelColor_full=(e)=>{colorOverlayRect.fill(e);const t=pureColorSelector.querySelector("#pure-color-on").checked;t?colorOverlayRect.opacity(1):"#FFFFFF"===e.toUpperCase()?colorOverlayRect.opacity(0):colorOverlayRect.opacity(.7),mainLayer.batchDraw()};
  materialSelector.addEventListener("change",e=>{if(e.target.name==="label-material")applyBaseMaterial_full(e.target.value)});
  labelColorSelector.addEventListener("click",e=>{const t=e.target.closest(".color-swatch");t&&(labelColorSelector.querySelectorAll(".color-swatch").forEach(e=>e.classList.remove("active")),t.classList.add("active"),applyLabelColor_full(t.dataset.colorHex))});
  pureColorSelector.addEventListener("change",()=>{const e=labelColorSelector.querySelector(".color-swatch.active");e&&applyLabelColor_full(e.dataset.colorHex)});
  mainLayer.on('dragmove',e=>{guideLayer.find(".guid-line").forEach(e=>e.destroy());const t=getLineGuideStops(),o=getObjectSnappingEdges(e.target),i=[];t.vertical.forEach(t=>{o.vertical.forEach(o=>{const n=Math.abs(t-o.guide);n<5&&(e.target.x(Math.round(e.target.x()-(o.guide-t))),i.push({lineGuide:t,orientation:"V"}))})}),t.horizontal.forEach(t=>{o.horizontal.forEach(o=>{const n=Math.abs(t-o.guide);n<5&&(e.target.y(Math.round(e.target.y()-(o.guide-t))),i.push({lineGuide:t,orientation:"H"}))})}),drawGuides(i),guideLayer.batchDraw()});
  mainLayer.on('dragend',()=>{guideLayer.find(".guid-line").forEach(e=>e.destroy()),guideLayer.batchDraw()});

  const initialMaterialUrl = materialSelector.querySelector('input[name="label-material"]:checked').value;
  applyBaseMaterial_full(initialMaterialUrl);
  const initialColorSwatch = labelColorSelector.querySelector('.color-swatch.active');
  if (initialColorSwatch) {
      applyLabelColor_full(initialColorSwatch.dataset.colorHex);
  }
  
  repositionAllTexts(); // 首次加载时也要布局一次文本
  stage.batchDraw();
  console.log("Konva: 初始化流程完成！ (版本 3.0)");
};
  
// ---- 启动器代码 (bootstrapper) - 无变化 ----
const bootstrapper = () => { /* ... */ };
document.addEventListener('turbo:load', bootstrapper);
document.addEventListener('shopify:section:load', (event) => { /* ... */ });
if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', bootstrapper); } else { bootstrapper(); }
</script>

{% schema %}
{
  "name": "Product Text Customizer",
  "settings": [],
  "presets": [ { "name": "Product Text Customizer" } ]
}
{% endschema %}