<script>
  // 将所有逻辑封装起来，防止全局变量污染
  const setupKonvaCustomizer = () => {
    // ---- 安全检查与初始化 ----
    // 1. 检查我们的section是否在当前页面上，如果不在就什么都不做
    const customizerSection = document.querySelector('#shopify-section-{{ section.id }}');
    if (!customizerSection) return;

    // 2. 找到画布容器
    const konvaContainer = customizerSection.querySelector('#konva-container');
    if (!konvaContainer) {
      console.error("Konva Error: 在 section '{{ section.id }}' 中找不到 #konva-container 元素。");
      return;
    }

    // 3. 防止重复初始化 (非常重要！)
    // 如果在Turbo导航下重复加载，我们不希望创建一堆新的画布
    if (konvaContainer.dataset.initialized === 'true') {
      console.log("Konva Info: 定制器已经初始化，跳过。");
      return;
    }
    konvaContainer.dataset.initialized = 'true'; // 标记为已初始化

    console.log("Konva Log: 开始初始化定制器...");

    // ---- Konva 核心代码 (与之前类似) ----
    const stageWidth = konvaContainer.clientWidth;
    const stageHeight = konvaContainer.clientHeight;

    const stage = new Konva.Stage({
      container: konvaContainer, // 直接传递元素引用更安全
      width: stageWidth,
      height: stageHeight,
    });

    const layer = new Konva.Layer();
    stage.add(layer);

    const backgroundRect = new Konva.Rect({
      x: 0, y: 0, width: stageWidth, height: stageHeight,
      fill: '#FFFFFF', stroke: '#dddddd', strokeWidth: 1
    });
    layer.add(backgroundRect);

    const konvaText = new Konva.Text({
      x: stageWidth / 2,
      y: stageHeight / 2,
      text: '你的文字',
      fontSize: 20,
      fontFamily: 'Arial',
      fill: '#000000',
      draggable: true,
    });
    layer.add(konvaText);
    konvaText.offsetX(konvaText.width() / 2);
    konvaText.offsetY(konvaText.height() / 2);
    
    layer.draw();
    console.log("Konva Log: 画布已成功绘制！");

    // --- 事件监听 ---
    const textInput = customizerSection.querySelector('#text-input');
    const fontSizeInput = customizerSection.querySelector('#font-size-input');
    const colorInput = customizerSection.querySelector('#color-input');
    const addToCartBtn = customizerSection.querySelector('#add-to-cart-btn');

    textInput.addEventListener('input', (e) => {
      konvaText.text(e.target.value || ' ');
      konvaText.offsetX(konvaText.width() / 2);
      layer.draw();
    });

    fontSizeInput.addEventListener('input', (e) => {
      konvaText.fontSize(parseInt(e.target.value, 10));
      konvaText.offsetX(konvaText.width() / 2);
      konvaText.offsetY(konvaText.height() / 2);
      layer.draw();
    });

    colorInput.addEventListener('input', (e) => {
      konvaText.fill(e.target.value);
      layer.draw();
    });
    
    // --- 添加到购物车逻辑 ---
    addToCartBtn.addEventListener('click', (e) => {
      e.preventDefault();
      // 在Shopify 2.0主题中，产品表单可能在section之外，所以我们从整个文档中查找
      const productForm = document.querySelector('form[action*="/cart/add"]');
      if (!productForm) {
        alert('错误：找不到产品表单。'); return;
      }
      const variantIdInput = productForm.querySelector('[name="id"]');
      if (!variantIdInput || !variantIdInput.value) {
        alert('错误：找不到产品变体ID。'); return;
      }
      
      const variantId = variantIdInput.value;
      backgroundRect.hide();
      layer.draw();
      const previewImage = stage.toDataURL({ pixelRatio: 2 });
      backgroundRect.show();
      layer.draw();

      let formData = { /* ... 保持不变 ... */ };
      fetch('/cart/add.js', { /* ... 保持不变 ... */ });
    });
  };

  // --- 全能的事件监听器 ---
  // 监听 Turbo Drive 的页面加载
  document.addEventListener('turbo:load', setupKonvaCustomizer);

  // 监听 Shopify 主题编辑器的 section 加载
  document.addEventListener('shopify:section:load', setupKonvaCustomizer);

  // 为防止在某些罕见情况下事件被错过，如果DOM已经加载完成，也尝试直接运行一次
  if (document.readyState === 'interactive' || document.readyState === 'complete') {
    setupKonvaCustomizer();
  } else {
    // 标准的 DOM 加载事件（作为后备）
    document.addEventListener('DOMContentLoaded', setupKonvaCustomizer);
  }
</script>