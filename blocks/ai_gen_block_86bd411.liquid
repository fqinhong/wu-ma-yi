{% doc %}
  @prompt
    An interactive before/after image slider. It should show 2 images overlapped that can be compared by dragging the slider.

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-before-after-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    max-width: {{ block.settings.max_width }}px;
    margin: 0 auto;
    overflow: hidden;
    border-radius: {{ block.settings.border_radius }}px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }

  .ai-before-after-container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    height: 0;
    padding-bottom: {{ block.settings.aspect_ratio }}%;
    overflow: hidden;
  }

  .ai-before-after-image-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .ai-before-after-after-{{ ai_gen_id }} {
    clip-path: polygon(var(--ai-clip-position, 50%) 0%, 100% 0%, 100% 100%, var(--ai-clip-position, 50%) 100%);
  }

  .ai-before-after-slider-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: var(--ai-slider-position, 50%);
    width: 4px;
    height: 100%;
    background-color: {{ block.settings.slider_color }};
    cursor: ew-resize;
    transform: translateX(-50%);
    z-index: 3;
  }

  .ai-before-after-handle-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    left: 50%;
    width: {{ block.settings.handle_size }}px;
    height: {{ block.settings.handle_size }}px;
    background-color: {{ block.settings.slider_color }};
    border: 3px solid {{ block.settings.handle_border_color }};
    border-radius: 50%;
    transform: translate(-50%, -50%);
    cursor: ew-resize;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
  }

  .ai-before-after-handle-{{ ai_gen_id }}::before,
  .ai-before-after-handle-{{ ai_gen_id }}::after {
    content: '';
    position: absolute;
    width: 0;
    height: 0;
    border-style: solid;
  }

  .ai-before-after-handle-{{ ai_gen_id }}::before {
    border-width: 6px 8px 6px 0;
    border-color: transparent {{ block.settings.handle_border_color }} transparent transparent;
    left: 8px;
  }

  .ai-before-after-handle-{{ ai_gen_id }}::after {
    border-width: 6px 0 6px 8px;
    border-color: transparent transparent transparent {{ block.settings.handle_border_color }};
    right: 8px;
  }

  .ai-before-after-label-{{ ai_gen_id }} {
    position: absolute;
    top: {{ block.settings.label_position_top }}%;
    padding: 8px 16px;
    background-color: {{ block.settings.label_bg_color }};
    color: {{ block.settings.label_text_color }};
    border-radius: 20px;
    font-size: {{ block.settings.label_font_size }}px;
    font-weight: 600;
    z-index: 2;
    pointer-events: none;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  }

  .ai-before-after-label-before-{{ ai_gen_id }} {
    left: {{ block.settings.label_position_side }}%;
  }

  .ai-before-after-label-after-{{ ai_gen_id }} {
    right: {{ block.settings.label_position_side }}%;
  }

  .ai-before-after-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: 0;
    left: 0;}

  .ai-before-after-placeholder-{{ ai_gen_id }} svg {
    width: 100px;
    height: 100px;
    opacity: 0.3;
  }

  @media (max-width: 768px) {
    .ai-before-after-{{ ai_gen_id }} {
      max-width: 100%;
    }

    .ai-before-after-handle-{{ ai_gen_id }} {
      width: {{ block.settings.handle_size | times: 1.2 }}px;
      height: {{ block.settings.handle_size | times: 1.2 }}px;
    }

    .ai-before-after-label-{{ ai_gen_id }} {
      font-size: {{ block.settings.label_font_size | times: 0.9 }}px;padding: 6px 12px;
    }
  }
{% endstyle %}<before-after-slider-{{ ai_gen_id }}
  class="ai-before-after-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-before-after-container-{{ ai_gen_id }}">
    {% if block.settings.before_image %}
      <img
        src="{{ block.settings.before_image | image_url: width: 1200}}"
        alt="{{ block.settings.before_image.alt | escape }}"
        class="ai-before-after-image-{{ ai_gen_id }}"
        loading="lazy"
        width="{{ block.settings.before_image.width }}"
        height="{{ block.settings.before_image.height }}"
      >
    {% else %}
      <div class="ai-before-after-placeholder-{{ ai_gen_id }}">
        {{ 'image' | placeholder_svg_tag }}
      </div>
    {% endif %}

    {% if block.settings.after_image %}
      <img
        src="{{ block.settings.after_image | image_url: width: 1200 }}"
        alt="{{ block.settings.after_image.alt | escape }}"
        class="ai-before-after-image-{{ ai_gen_id }} ai-before-after-after-{{ ai_gen_id }}"
        loading="lazy"
        width="{{ block.settings.after_image.width }}"
        height="{{ block.settings.after_image.height }}"
      >
    {% else %}
      <div class="ai-before-after-placeholder-{{ ai_gen_id }} ai-before-after-after-{{ ai_gen_id }}">
        {{ 'image' | placeholder_svg_tag }}
      </div>
    {% endif %}

    {% if block.settings.show_labels %}
      {% if block.settings.before_label != blank %}
        <div class="ai-before-after-label-{{ ai_gen_id }} ai-before-after-label-before-{{ ai_gen_id }}">
          {{ block.settings.before_label }}
        </div>
      {% endif %}

      {% if block.settings.after_label != blank %}
        <div class="ai-before-after-label-{{ ai_gen_id }} ai-before-after-label-after-{{ ai_gen_id }}">
          {{ block.settings.after_label }}
        </div>
      {% endif %}
    {% endif %}<div class="ai-before-after-slider-{{ ai_gen_id }}">
      <div class="ai-before-after-handle-{{ ai_gen_id }}"></div>
    </div>
  </div>
</before-after-slider-{{ ai_gen_id }}>

<script>
  (function() {
    class BeforeAfterSlider{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.isDragging = false;
        this.startPosition = {{ block.settings.initial_position }};
      }

      connectedCallback() {
        this.container = this.querySelector('.ai-before-after-container-{{ ai_gen_id }}');
        this.slider = this.querySelector('.ai-before-after-slider-{{ ai_gen_id }}');
        this.afterImage = this.querySelector('.ai-before-after-after-{{ ai_gen_id }}');
        this.setInitialPosition();
        this.setupEventListeners();
      }

      setInitialPosition() {
        this.updatePosition(this.startPosition);
      }

      setupEventListeners() {
        this.slider.addEventListener('mousedown', this.handleStart.bind(this));
        this.slider.addEventListener('touchstart', this.handleStart.bind(this));document.addEventListener('mousemove', this.handleMove.bind(this));
        document.addEventListener('touchmove', this.handleMove.bind(this));document.addEventListener('mouseup', this.handleEnd.bind(this));
        document.addEventListener('touchend', this.handleEnd.bind(this));
        
        this.container.addEventListener('click', this.handleClick.bind(this));}

      handleStart(e) {
        e.preventDefault();
        this.isDragging = true;
        this.container.style.cursor = 'ew-resize';
      }

      handleMove(e) {
        if (!this.isDragging) return;
        
        e.preventDefault();
        const rect = this.container.getBoundingClientRect();
        const clientX = e.type.includes('touch') ? e.touches[0].clientX : e.clientX;
        const position = ((clientX - rect.left) / rect.width) * 100;
        
        this.updatePosition(Math.max(0, Math.min(100, position)));
      }

      handleEnd() {
        this.isDragging = false;
        this.container.style.cursor = '';
      }

      handleClick(e) {
        if (e.target === this.slider || e.target.closest('.ai-before-after-slider-{{ ai_gen_id }}')) {
          return;
        }
        
        const rect = this.container.getBoundingClientRect();
        const position = ((e.clientX - rect.left) / rect.width) * 100;
        this.updatePosition(Math.max(0, Math.min(100, position)));
      }

      updatePosition(percentage) {
        const position = `${percentage}%`;
        this.style.setProperty('--ai-slider-position', position);
        this.style.setProperty('--ai-clip-position', position);
      }
    }

    customElements.define('before-after-slider-{{ ai_gen_id }}', BeforeAfterSlider{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Before/After Slider",
  "settings": [
    {
      "type": "header",
      "content": "Images"
    },
    {
      "type": "image_picker",
      "id": "before_image",
      "label": "Before image"
    },
    {
      "type": "image_picker",
      "id": "after_image",
      "label": "After image"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "max_width",
      "min": 300,
      "max": 1200,
      "step": 50,
      "unit": "px",
      "label": "Maximum width",
      "default": 800
    },
    {
      "type": "select",
      "id": "aspect_ratio",
      "label": "Aspect ratio",
      "options": [
        {
          "value": "56.25",
          "label": "16:9"
        },
        {
          "value": "66.67",
          "label": "3:2"
        },
        {
          "value": "75",
          "label": "4:3"
        },
        {
          "value": "100",
          "label": "1:1"
        }
      ],
      "default": "66.67"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    },
    {
      "type": "range",
      "id": "initial_position",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "%",
      "label": "Initial slider position",
      "default": 50
    },
    {
      "type": "header",
      "content": "Slider Style"
    },
    {
      "type": "color",
      "id": "slider_color",
      "label": "Slider color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "handle_size",
      "min": 30,
      "max": 60,
      "step": 5,
      "unit": "px",
      "label": "Handle size",
      "default": 40
    },
    {
      "type": "color",
      "id": "handle_border_color",
      "label": "Handle border color",
      "default": "#333333"
    },
    {
      "type": "header",
      "content": "Labels"
    },
    {
      "type": "checkbox",
      "id": "show_labels",
      "label": "Show labels",
      "default": true
    },
    {
      "type": "text",
      "id": "before_label",
      "label": "Before label",
      "default": "Before"
    },
    {
      "type": "text",
      "id": "after_label",
      "label": "After label",
      "default": "After"
    },
    {
      "type": "range",
      "id": "label_font_size",
      "min": 10,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Label font size",
      "default": 14
    },
    {
      "type": "color",
      "id": "label_bg_color",
      "label": "Label background color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "label_text_color",
      "label": "Label text color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "label_position_top",
      "min": 5,
      "max": 25,
      "step": 5,
      "unit": "%",
      "label": "Label vertical position",
      "default": 10
    },
    {
      "type": "range",
      "id": "label_position_side",
      "min": 5,
      "max": 25,
      "step": 5,
      "unit": "%",
      "label": "Label horizontal position",
      "default": 10
    }
  ],
  "presets": [
    {
      "name": "Before/After Slider"
    }
  ]
}
{% endschema %}